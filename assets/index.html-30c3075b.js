import{_ as i,p as l,q as e,Z as t}from"./framework-fdd38eac.js";const a="/assets/1562625124688-c6404ad3.png",p={},o=t('<h1 id="hybrid混合app开发" tabindex="-1"><a class="header-anchor" href="#hybrid混合app开发" aria-hidden="true">#</a> Hybrid混合APP开发</h1><ol><li><p>前端做的都是H5页面 WebApp</p><ul><li>运行在浏览器中</li><li>移动端不仅可以运行在浏览器中，还可以运行在APP中（例如：微信、自己公司的APP中）</li><li>优点： <ul><li>及时更新（不需要用户选择，我们只需要把服务器上的源文件更新，用户访问的永远是最新的）跨平台</li></ul></li><li>弊端： <ul><li>不是直接运行在操作系统中的，是运行在浏览器或者APP中的，所以不能直接的操作手机上的软硬件（运作模式：H5通知浏览器或者APP我们想做什么 -&gt; 浏览器调取手机的软硬件 -&gt; 浏览器把信息返回给H5）</li><li>性能没有APP好</li><li>...</li></ul></li></ul></li><li><p>APP不是H5,它是原生的应用NativeApp</p><ul><li>IOS：object-c / swift (需要C的功底)</li><li>安卓：java-native （需要JAVA功底）</li><li>优点：用户把安装包下载到手机上进行安装，后期程序是直接运行在手机操作系统中的 <ul><li>性能高</li><li>可以调取手机内置的软件或者硬件（例如：调取摄像头、重力感应器、通讯录等）[前提用户需要同意才可以]</li></ul></li><li>弊端 <ul><li>不能跨平台，一款产品需要两个团队开发两套不同的安装包 <ul><li>成本大</li><li>版本不统一</li></ul></li><li>不能及时更新</li><li>苹果商店上传一款APP需要7天审核周期</li></ul></li></ul></li><li><p>Hybrid混合开发模式 把传统IOS和安卓开发与H5开发结合在一起来做（微信公众号开发：把我们做的H5运行在微信APP中）</p></li><li><p>ReactNative ionic 微信小程序... <img src="'+a+'" alt="1562625124688"> NativeApp提供一个供H5运行的环境 &quot;web view&quot;（webkit内核 =&gt; 浏览器的另一种叫法）</p><p>H5和APP的通信：<strong>jsBridge模式</strong> 微信APP把所有H5可以调取的方法和功能都注入到webView的全局对象中 webView有一个全局对象wx={xxx:...} H5运行在webView中，所以在JS中可以使用wx.xxx()完成方法的调用</p></li></ol>',2),r=[o];function s(c,n){return l(),e("div",null,r)}const P=i(p,[["render",s],["__file","index.html.vue"]]);export{P as default};
