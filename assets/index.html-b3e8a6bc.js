import{_ as n,p as a,q as s,Z as e}from"./framework-fdd38eac.js";const t="/assets/1562857750432-976aa2a4.png",l={},i=e(`<h1 id="事件和事件委托" tabindex="-1"><a class="header-anchor" href="#事件和事件委托" aria-hidden="true">#</a> 事件和事件委托</h1><h2 id="事件的理论基础" tabindex="-1"><a class="header-anchor" href="#事件的理论基础" aria-hidden="true">#</a> 事件的理论基础</h2><p>【DOM事件】</p><p>window也可以理解为DOM，window.onload指页面元素加载结束执行的行为，也相当于DOM</p><ul><li>1、什么是事件</li></ul><p>事件就是一件事情或者一个行为（对于元素来说，它的很多事件都是天生自带的），只要我们去操作这个元素，就会触发这些行为</p><p>“事件就是元素天生自带的行为，我们操作元素，就会触发相关的事件行为“</p><ul><li>2、事件绑定：给元素天生自带的事件行为绑定方法，当事件触发，会把对应的方法执行</li><li>3、元素天生自带的事件有哪些？ <ul><li>[鼠标事件] <ul><li>click：点击（PC端是点击，移动端的click代表单击。<strong>移动端使用click会有300ms延迟的问题</strong>。只要按下去就是点击，单击是一段时间内只能点一下。因为还有双击。）</li><li>dblclick：双击</li><li>mouseover：鼠标经过</li><li>mouseout：鼠标移出</li><li>mouseenter：鼠标进入</li><li>mouseleave：鼠标离开</li><li>mousemove：鼠标移动</li><li>mousedown：鼠标按下（鼠标左右键都起作用，它是按下就触发，click是按下抬起才会触发，而且 是先把down和up触发，才会触发click）</li><li>mousewheel：鼠标滚轮滚动</li><li>...</li></ul></li><li>[键盘事件] <ul><li>keydown：键盘按下</li><li>keyup：键盘抬起</li><li>keypress：和keydown类似，只不过keydown返回的是 键盘码，keypress返回的是ASCII码值</li><li>input：由于 PC端有实体物理键盘，可以监听到键盘的按下和抬起，但是移动端是虚拟的键盘，所以keydown和keyup再大部分手机上都没有，我们使用input事件统一代替他们（内容改变事件）</li></ul></li><li>[表单元素常用的事件] <ul><li>focus：获取焦点</li><li>blur：失去焦点</li><li>change：内容改变</li><li>...</li></ul></li><li>[其他常用事件] <ul><li>load：加载完成</li><li>unload：页面关闭</li><li>beforeunload：页面关闭之前</li><li>scroll：滚动条滚动事件</li><li>size：大小改变事件 <code>window.onsize=function(){}当浏览器窗口大小发生改变，会触发这个事件，执行对应的事情</code></li><li>...</li></ul></li><li>[移动端手指事件] touch单手指操作模型、gesture多手指操作模型 <ul><li>touchstart：手指按下</li><li>touchmove：手指移动</li><li>touchend：手指离开</li><li>touchcancel：因为意外情况导致手指操作取消</li><li>gesturestart：手指按下</li><li>gesturechange：手指改变</li><li>gestureend：手指离开</li><li>...</li></ul></li><li>[H5中的audio/video音视频事件] <ul><li>canplay：可以播放（播放过程中可能出现由于资源没有加载完成，导致的卡顿）</li><li>canplaythrough：资源加载完成，可以正常无障碍播放</li><li>...</li></ul></li></ul></li></ul><h2 id="事件对象中常用的属性" tabindex="-1"><a class="header-anchor" href="#事件对象中常用的属性" aria-hidden="true">#</a> 事件对象中常用的属性</h2><p>事件绑定：</p><ul><li>DOM0级事件绑定 <ul><li><code>[element].onxxx=function(){}</code></li></ul></li><li>DOM2级事件绑定 <ul><li><code>[element].addEventListener(&#39;xxx&#39;,function(){},false)</code>第三个参数是冒泡还是捕获阶段</li><li><code>[element].attachEvent(&#39;onxxx&#39;,function(){})</code>IE6~8</li></ul></li></ul><p>目的：给当前元素的某个事件绑定方法（不管是基于DOM0还是DOM2），都是为了触发元素的相关行为的时候，能做点事情（也就是把绑定的方法执行）；”不仅把方法执行了，而且浏览器还给方法传递了一个实参信息值 ==&gt; 这个值就是事件对象“</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>textInp<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">let</span> oBox <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;box&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 定义一个形参ev用来接收方法执行的时候，浏览器传递的信息值（事件对象：MouseEvent鼠标事件对象、KeyboardEvent键盘事件对象、Event普通时间对象...）</span>
    <span class="token comment">// 事件对象中记录了很多属性名和属性值，这些信息中包含了当前操作的基础信息，例如：鼠标点击位置的X/Y轴坐标，鼠标点击的是谁（事件源）等信息</span>
    oBox<span class="token punctuation">.</span><span class="token function-variable function">onclick</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//MouseEvent鼠标事件对象</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">let</span> textInp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;textInp&#39;</span><span class="token punctuation">)</span>
    textInp<span class="token punctuation">.</span><span class="token function-variable function">onkeydown</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//KeyboardEvent键盘事件对象</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">ev</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ev<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Event普通事件对象</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>事件对象常用的属性：</p><ul><li>[MouseEvent] <ul><li>ev.target 事件源（操作的是哪个元素）</li><li>ev.clientX / ev.clientY 当前鼠标触发点距离当前窗口左上角的X/Y轴坐标</li><li>ev.pageX / ev.pageY 当前鼠标触发点距离BODY（第一屏幕）左上角的X / Y轴坐标</li><li>ev.preventDefault() 阻止默认行为</li><li>ev.stopPropagation() 阻止事件的冒泡传播</li><li>ev.type 当前事件类型（click）</li></ul></li></ul><p><img src="`+t+`" alt="1562857750432"></p><ul><li><p>[KeyboardEvent]</p><ul><li><p>ev.code 当前按键&#39;keyE&#39; 键盘按E键</p></li><li><p>ev.key 当前按键&#39;e&#39;</p></li><li><p>ev.which / ev.keyCode 当前按键的键盘码（IE用keyCode获取，火狐和Opera用的是which，谷歌两个都可以）</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>let code = ev.which || ev.keyCode；// 兼容这么写
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>常用的键盘码 <ul><li>左-上-右-下：37-38-39-40</li><li>回退Backspace：8</li><li>Enter：13</li><li>Space：32</li><li>Delete：46</li><li>Shift：16</li><li>Alt：18</li><li>Ctrl：17</li><li>ESC：27</li><li>F1~F12：112~123</li><li>横向数字键0~9：48~57</li><li>大小写都是a~z：65~90</li></ul></li></ul></li><li><p>ev.type 当前事件类型（keydown）</p></li></ul></li></ul><h2 id="事件对象的兼容问题" tabindex="-1"><a class="header-anchor" href="#事件对象的兼容问题" aria-hidden="true">#</a> 事件对象的兼容问题</h2><h2 id="默认行为及阻止" tabindex="-1"><a class="header-anchor" href="#默认行为及阻止" aria-hidden="true">#</a> 默认行为及阻止</h2><h2 id="事件传播机制-很重要" tabindex="-1"><a class="header-anchor" href="#事件传播机制-很重要" aria-hidden="true">#</a> 事件传播机制（很重要）</h2><h2 id="mouseenter和mouseover的区别" tabindex="-1"><a class="header-anchor" href="#mouseenter和mouseover的区别" aria-hidden="true">#</a> mouseenter和mouseover的区别</h2><h2 id="【京东放大镜】结构样式和移动比例原理分析" tabindex="-1"><a class="header-anchor" href="#【京东放大镜】结构样式和移动比例原理分析" aria-hidden="true">#</a> 【京东放大镜】结构样式和移动比例原理分析</h2><h2 id="【京东放大镜】基于jq实现具体的功能" tabindex="-1"><a class="header-anchor" href="#【京东放大镜】基于jq实现具体的功能" aria-hidden="true">#</a> 【京东放大镜】基于JQ实现具体的功能</h2><h2 id="鼠标跟随实战案例" tabindex="-1"><a class="header-anchor" href="#鼠标跟随实战案例" aria-hidden="true">#</a> 鼠标跟随实战案例</h2><h2 id="事件委托" tabindex="-1"><a class="header-anchor" href="#事件委托" aria-hidden="true">#</a> 事件委托</h2><h2 id="分类导航" tabindex="-1"><a class="header-anchor" href="#分类导航" aria-hidden="true">#</a> 分类导航</h2><h2 id="放大镜第二种写法-基于原生实现-左右盒子不同的宽度" tabindex="-1"><a class="header-anchor" href="#放大镜第二种写法-基于原生实现-左右盒子不同的宽度" aria-hidden="true">#</a> 放大镜第二种写法-基于原生实现（左右盒子不同的宽度）</h2><h2 id="基于事件委托实现无限级折叠菜单" tabindex="-1"><a class="header-anchor" href="#基于事件委托实现无限级折叠菜单" aria-hidden="true">#</a> 基于事件委托实现无限级折叠菜单</h2>`,28),o=[i];function p(c,u){return a(),s("div",null,o)}const r=n(l,[["render",p],["__file","index.html.vue"]]);export{r as default};
