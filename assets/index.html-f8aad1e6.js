import{_ as n,p as s,q as a,Z as t}from"./framework-fdd38eac.js";const p="/assets/1553308650534-4a6db9d3.png",e="/assets/1553440505355-6c7bc8cb.png",o={},c=t(`<h1 id="webapi-标准api" tabindex="-1"><a class="header-anchor" href="#webapi-标准api" aria-hidden="true">#</a> webapi 标准api</h1><h2 id="webapi" tabindex="-1"><a class="header-anchor" href="#webapi" aria-hidden="true">#</a> webapi</h2><h3 id="formdata" tabindex="-1"><a class="header-anchor" href="#formdata" aria-hidden="true">#</a> FormData</h3><h4 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h4><p>FormData类其实是在XMLHttpRequest2级定义的, 它是为序列化表以及创建于表单格式相同的数据(当然是用于XHR传输)提供便利.</p><h4 id="构造函数" tabindex="-1"><a class="header-anchor" href="#构造函数" aria-hidden="true">#</a> 构造函数</h4><p>创建一个formData对象实例有几种方式</p><ol><li>创建一个空对象 实例</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>此时可以调用append()方法来添加数据.</p><ol start="2"><li>使用已有的表单来初始化一个对象.</li></ol><p>假如现在页面已经有一个表单</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token punctuation">&quot;</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>myForm<span class="token punctuation">&quot;</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>post<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>名字
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>psw<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>密码
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>提交<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们可以使用这个表单元素作为初始化参数, 来实例化一个formData对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 获取页面已有的一个form表单</span>
<span class="token keyword">let</span> form <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">&#39;myForm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 用表单来初始化</span>
<span class="token keyword">let</span> formData <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormData</span><span class="token punctuation">(</span>form<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 我们可以根据name来访问表单中的字段</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> formData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取名字</span>
<span class="token keyword">let</span> psw <span class="token operator">=</span> formData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;psw&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取密码</span>
<span class="token comment">// 当然也可以在此基础上, 添加其他数据</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;token&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;asd3gdf&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="操作方法" tabindex="-1"><a class="header-anchor" href="#操作方法" aria-hidden="true">#</a> 操作方法</h4><p>我们要明确formData里面存储的数据形式, 一对key/value组成一条数据, key是唯一的,一个key可能对应多个value. 如果是使用表单初始化, 每一个表单字段对应一条数据, 它们的HTML name属性即为key值, 它们value属性对应value值.</p><table><thead><tr><th>key</th><th>value</th></tr></thead><tbody><tr><td>k1</td><td>[v1,v2,v3]</td></tr><tr><td>k2</td><td>v4</td></tr></tbody></table><ol><li>获取值</li></ol><p>可以通过<code>get(key)</code>和<code>getAll(key)</code>来获取对应的value.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>formData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取key为name的第一个值.</span>
formData<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">&quot;name&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 返回一个数组, 获取key为name的所有值</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>添加数据</li></ol><p>可以通过append(key, value)来添加数据, 如果指定的key不存在则会新增一条数据, 如果key存在, 则添加到数据的末尾</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

formData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// &quot;v1&quot;</span>
formData<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&quot;v1&quot;,&quot;v2&quot;,&quot;v1&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>设置修改数据</li></ol><p>通过set(key, value)来设置修改数据, 如果指定的key不存在则会新增一条, 如果存在, 则会修改对应的value值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&quot;1&quot;]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="4"><li>判断是否该数据</li></ol><p>可以通过has(key)来判断是否对应的key值</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k2&quot;</span><span class="token punctuation">,</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

formData<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
formData<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;k2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// true</span>
formData<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span><span class="token string">&quot;k3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="5"><li>删除数据</li></ol><p>通过delete(key), 来删除数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

formData<span class="token punctuation">.</span><span class="token function">getAll</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// []</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>遍历</li></ol><p>通过entries()来获取一个迭代器, 然后遍历所有的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k1&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v2&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
formData<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&quot;k2&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;v1&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> i <span class="token operator">=</span> formData<span class="token punctuation">.</span><span class="token function">entries</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {done:false, value:[&quot;k1&quot;, &quot;v1&quot;]}</span>
i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {done:fase, value:[&quot;k1&quot;, &quot;v2&quot;]}</span>
i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {done:fase, value:[&quot;k2&quot;, &quot;v1&quot;]}</span>
i<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// {done:true, value:undefined}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到返回迭代器的规则</p><ul><li><p>每调用一次next()返回一条数据, 数据的顺序由添加的顺序决定</p></li><li><p>返回的是一个对象, 当其done属性为true时, 说明已经遍历完所有的数据, 这个也可以作为判断的依据</p></li><li><p>返回的对象的value属性以数组形式存储了一对key/value, 数组下标0为key, 下标1为value, 如果一个key值对应多个value, 会变成多对key/value返回</p></li></ul><p>可以通过values()方法只获取value值</p><h4 id="发送数据" tabindex="-1"><a class="header-anchor" href="#发送数据" aria-hidden="true">#</a> 发送数据</h4><p>我们可以通过xhr来发送数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> xhr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">&quot;post&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;login&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">setRequestHeader</span><span class="token punctuation">(</span><span class="token string">&quot;Content-Type&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;application/x-www-form-urlencoded&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
xhr<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>formData<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式可以实现文件的异步上传</p><h4 id="form标签的enctype属性" tabindex="-1"><a class="header-anchor" href="#form标签的enctype属性" aria-hidden="true">#</a> form标签的enctype属性</h4><p>enctype就是encodetype就是编码类型的意思.</p><p>multipart/form-data是指表单数据由多部分构成, 既有文本数据, 又有文件等二进制数据.</p><p>application/x-www-form-urlencoded不是不能上传文件, 是只能上传文本格式的文件, multipart/form-data是将文件以二进制的形式上传, 这样可以实现多种类型的文件上传.</p><p>enctype属性规定在发送到服务器之前应该如何对表单数据进行编码.</p><p>默认地, 表单数据会编码为&quot;application/x-www-form-urlencoded&quot;. 就是说, 在发送到服务器之前, 所有字符都会进行编码(空格转换为&quot;+&quot;加号, 特殊符号转换为ASCII HEX值)</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>application/x-www-form-urlencoded</td><td>在发送前编码所有字符(默认)</td></tr><tr><td>multipart/form-data</td><td>不对字符编码. 在使用包含文件上传空间的表单时, 必须使用该值</td></tr><tr><td>text/plain</td><td>空格转换为&quot;+&quot;加号, 但不对特殊字符编码</td></tr></tbody></table><p>例子: 表单数据会在未编码的情况下发送</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>form_action.asp<span class="token punctuation">&quot;</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/plain<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>First name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fname<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>Last name: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lname<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>submit<span class="token punctuation">&quot;</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Submit<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="获取节点dom" tabindex="-1"><a class="header-anchor" href="#获取节点dom" aria-hidden="true">#</a> 获取节点DOM</h3><p>获取当前节点的父级节点<code>my$(&quot;uu&quot;).parentNode</code></p><p>获取当前节点的父级元素<code>my$(&quot;uu&quot;).parentElement</code></p><p>获取当前节点的子级节点<code>my$(&quot;uu&quot;).childNodes</code></p><p>获取当前节点的子级元素<code>my$(&quot;uu&quot;).children</code></p><p>获取当前节点的第一个子级节点<code>my$(&quot;uu&quot;).firstChild</code></p><p>获取当前节点的第一个子级元素<code>my$(&quot;uu&quot;).firstElementChild</code></p><p>获取当前节点的最后一个子级节点<code>my$(&quot;uu&quot;).lastChild</code></p><p>获取当前节点的最后一个子级元素<code>my$(&quot;uu&quot;).lastElementChild</code></p><p>sibling:兄弟 同胞</p><p>获取当前节点的前一个兄弟节点<code>my$(&quot;uu&quot;).previousSibling</code></p><p>获取当前节点的前一个兄弟元素<code>my$(&quot;uu&quot;).previousElementSibling</code></p><p>获取当前节点的后一个兄弟节点<code>my$(&quot;uu&quot;).nextSibling</code></p><p>获取当前节点的后一个兄弟元素<code>my$(&quot;uu&quot;).nextElementSibling</code></p><h3 id="innertext和textcontent" tabindex="-1"><a class="header-anchor" href="#innertext和textcontent" aria-hidden="true">#</a> innerText和textContent</h3><p>设置标签中的文本内容,应该使用textContent属性,谷歌,火狐支持,IE8不支持</p><p>设置标签中的文本内容,应该使用innerText属性,谷歌,火狐,IE8都支持</p><p>如果这个属性在浏览器中不支持,那么这个属性的类型是undefined</p><p>判断这个属性的类型 是不是undefined,就知道浏览器是否支持</p><h3 id="三大系列" tabindex="-1"><a class="header-anchor" href="#三大系列" aria-hidden="true">#</a> 三大系列:</h3><p>在style 标签 中设置的样式属性获取不到</p><p>style 属性 中设置的样式属性是可以获取到的</p><p>获取元素的样式,下面的方式不可用了</p><p>console.log(my$(&quot;dv1&quot;).style.width);</p><p>console.log(my$(&quot;dv1&quot;).style.height);</p><p>以后获取元素的宽和高,应该使用offset系列来获取</p><h4 id="offset系列" tabindex="-1"><a class="header-anchor" href="#offset系列" aria-hidden="true">#</a> offset系列</h4><p>父级元素没有脱离文档流:</p><p>子级元素的<code>offsetLeft</code>或者<code>offsetTop</code>=父级元素margin+父级元素padding+父级元素border+自己的margin</p><p>父级元素脱离文档流:</p><p>子级元素的<code>offsetLeft</code>或者<code>OffsetTop</code>=自己的left和自己的margin</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>offsetLeft<span class="token operator">/</span>offsetTop<span class="token operator">:</span>到左边和上边不算自己的边框

<span class="token literal-property property">offsetWidth</span><span class="token operator">:</span><span class="token function">获取元素的宽度</span><span class="token punctuation">(</span>有边框<span class="token punctuation">)</span>

<span class="token literal-property property">offsetHeight</span><span class="token operator">:</span><span class="token function">获取元素的高度</span><span class="token punctuation">(</span>有边框<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="offset系列浅析" tabindex="-1"><a class="header-anchor" href="#offset系列浅析" aria-hidden="true">#</a> offset系列浅析</h5><p>1.offsetLeft:HTMLElement.offsetLeft(DOM对象的offsetLeft属性来获取left)是一个只读属性,<strong>返回当前元素左上角相对于HTMLElement.offsetParent节点的左边界偏移的像素值.</strong> 2.offsetWidth指当前元素的宽=border+padding+width;(宽含边框) offsetHeight指当前元素的高=border+padding+height;(高含边框)</p><p>下面重点是offsetLeft和offsetTop的理解</p><h6 id="_1-只有自己一个元素时" tabindex="-1"><a class="header-anchor" href="#_1-只有自己一个元素时" aria-hidden="true">#</a> 1.只有自己一个元素时</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">加了定位</span><span class="token punctuation">(</span>相对定位<span class="token punctuation">,</span>绝对定位<span class="token punctuation">)</span>后<span class="token operator">:</span>
offsetLeft<span class="token operator">=</span>left<span class="token operator">+</span><span class="token punctuation">(</span>margin<span class="token operator">-</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>
offsetTop<span class="token operator">=</span>top<span class="token operator">+</span><span class="token punctuation">(</span>margin<span class="token operator">-</span>top<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token literal-property property">没加定位后</span><span class="token operator">:</span>
offsetLeft<span class="token operator">=</span>margin<span class="token operator">-</span>left<span class="token punctuation">;</span>
offsetTop<span class="token operator">=</span>margin<span class="token operator">-</span>top<span class="token punctuation">;</span>

<span class="token literal-property property">不论是否定位</span><span class="token operator">:</span>
offsetWidth指当前元素的宽<span class="token operator">=</span>border<span class="token operator">+</span>padding<span class="token operator">+</span>width<span class="token punctuation">;</span><span class="token punctuation">(</span>宽含边框<span class="token punctuation">)</span>
offsetHeight指当前元素的高<span class="token operator">=</span>border<span class="token operator">+</span>padding<span class="token operator">+</span>height<span class="token punctuation">;</span><span class="token punctuation">(</span>高含边框<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h6 id="_2-有父元素和子元素时-求子元素的offsetleft和offsettop" tabindex="-1"><a class="header-anchor" href="#_2-有父元素和子元素时-求子元素的offsetleft和offsettop" aria-hidden="true">#</a> 2.有父元素和子元素时,求子元素的offsetLeft和offsetTop</h6><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>style<span class="token operator">&gt;</span>
    <span class="token operator">*</span><span class="token punctuation">{</span>
        <span class="token literal-property property">margin</span><span class="token operator">:</span><span class="token number">0</span> <span class="token punctuation">;</span>
        <span class="token literal-property property">padding</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    #bigdv <span class="token punctuation">{</span>
        margin<span class="token operator">-</span>left<span class="token operator">:</span> 150px<span class="token punctuation">;</span>
        margin<span class="token operator">-</span>top<span class="token operator">:</span> 50px<span class="token punctuation">;</span>
        padding<span class="token operator">-</span>left<span class="token operator">:</span> 17px<span class="token punctuation">;</span>
        padding<span class="token operator">-</span>top<span class="token operator">:</span> 23px<span class="token punctuation">;</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> 300px<span class="token punctuation">;</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> 300px<span class="token punctuation">;</span>
        background<span class="token operator">-</span>color<span class="token operator">:</span> green<span class="token punctuation">;</span>
        <span class="token literal-property property">border</span><span class="token operator">:</span>30px red solid<span class="token punctuation">;</span>
        <span class="token comment">/*position: absolute;*/</span>
    <span class="token punctuation">}</span>
    #dv <span class="token punctuation">{</span>
        margin<span class="token operator">-</span>left<span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        margin<span class="token operator">-</span>top<span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        padding<span class="token operator">-</span>left<span class="token operator">:</span> 13px<span class="token punctuation">;</span>
        padding<span class="token operator">-</span>top<span class="token operator">:</span> 12px<span class="token punctuation">;</span>
        <span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
        background<span class="token operator">-</span>color<span class="token operator">:</span> pink<span class="token punctuation">;</span>
        <span class="token literal-property property">border</span><span class="token operator">:</span>10px red solid<span class="token punctuation">;</span>
        <span class="token comment">/*position: absolute;*/</span>
    <span class="token punctuation">}</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>style<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>body<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;bigdv&quot;</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;dv&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>分四种情况</strong></p><p>(1).当父元素 <strong>没有</strong> 定位,子元素 <strong>没有</strong> 定位时</p><p>包含当前dv元素的不是定位元素,那么offsetLeft或offsetTop是dv盒子外边界相对于根元素内边界的距离.(此时根元素就是body,body可能没有内外边界,暂就这么理解)</p><p>子元素#dv的:</p><p>offsetLeft=bigdv.(margin-left)+bigdv.(border-left)+bigdv.(padding-left)+dv.(margin-left)=150+30+17+100=297;</p><p>offsetTop=bigdv.(margin-top)+bigdv.(border-top)+bigdv.(padding-top)+dv.(margin-top)=50+30+23+100=203;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;(有左右border,左padding)</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><p>(2).当父元素 <strong>有</strong> 定位,子元素 <strong>没有</strong> 定位时</p><p>此时dv元素要相对于它的父元素,因为父元素定位了,不再相对于根元素.此时offsetLeft或offsetTop是dv盒子的外边界相对于父元素盒子的border内边界的距离.</p><p>子元素#dv的:</p><p>offsetLeft=bigdv.(padding-left)+dv.(margin-left)=17+100=117;</p><p>offsetTop=bigdv.(padding-top)+dv.(margin-top)=23+100=123;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><p>(3).当父元素 <strong>有</strong> 定位,子元素 <strong>有</strong> 定位时</p><p>父元素相对定位还是绝对定位都不会对子元素的offset类有影响.</p><p>下面两种是子元素绝对定位的情况</p><p><strong>第一种情况:子元素dv没有设置left和top值.</strong></p><p>子元素#dv的:</p><p>offsetLeft=bigdv.(padding-left)+dv.(margin-left)=17+100=117;</p><p>offsetTop=bigdv.(padding-top)+dv.(margin-top)=23+100=123;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><p><strong>第二种情况:子元素dv设置了left:10,top:10.</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>#dv <span class="token punctuation">{</span>
    margin<span class="token operator">-</span>left<span class="token operator">:</span> 100px<span class="token punctuation">;</span>
    margin<span class="token operator">-</span>top<span class="token operator">:</span> 100px<span class="token punctuation">;</span>
    padding<span class="token operator">-</span>left<span class="token operator">:</span> 13px<span class="token punctuation">;</span>
    padding<span class="token operator">-</span>top<span class="token operator">:</span> 12px<span class="token punctuation">;</span>
    <span class="token literal-property property">width</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
    <span class="token literal-property property">height</span><span class="token operator">:</span> 100px<span class="token punctuation">;</span>
    background<span class="token operator">-</span>color<span class="token operator">:</span> pink<span class="token punctuation">;</span>
    <span class="token literal-property property">border</span><span class="token operator">:</span>10px red solid<span class="token punctuation">;</span>
    <span class="token literal-property property">position</span><span class="token operator">:</span> absolute<span class="token punctuation">;</span>
    <span class="token literal-property property">left</span><span class="token operator">:</span> 10px<span class="token punctuation">;</span>
    <span class="token literal-property property">top</span><span class="token operator">:</span>10px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子元素先定位,没有设置left的时候,父元素的padding-left还会有效果,(因为此时的left有一个默认值,默认值不是0,其实默认值就是padding-left的值).如果加了left:10,那么padding-left会失效,因为定位开始了,以left优先.top同理.</p><p>子元素#dv的:</p><p>offsetLeft=dv.left+dv.(margin-left)=10+100=110;</p><p>offsetTop=dv.top+dv.(margin-top)=10+100=110;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><p>下面两种是子元素相对定位的情况</p><p><strong>第一种情况:子元素dv没有设置left和top值.</strong></p><p>子元素#dv的:</p><p>offsetLeft=bigdv.(padding-left)+dv.(margin-left)=17+100=117;</p><p>offsetTop=bigdv.(padding-top)+dv.(margin-top)=23+100=123;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><p><strong>第二种情况:子元素dv设置了left:10,top:10.</strong></p><p>子元素#dv的:</p><p>offsetLeft=bigdv.(padding-left)+dv.left+dv.(margin-left)=17+10+100=127;</p><p>offsetTop=bigdv.(padding-top)+dv.top+dv.(margin-top)=23+10+100=133;</p><p>offsetWidth=dv.border+dv.padding+dv.width=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=132;</p><p>(4).当父元素 <strong>没有</strong> 定位,子元素 <strong>有</strong> 定位时</p><p>下面两种是子元素绝对定位的情况</p><p><strong>第一种情况:子元素dv没有设置left和top值.</strong></p><p>子元素#dv的:</p><p>offsetLeft=bigdv.(margin-left)+bigdv.(border-left)+bigdv.(padding-left)+dv.(margin-left)=150+30+17+100=297;</p><p>offsetTop=bigdv.(margin-top)+bigdv.(border-top)+bigdv.(padding-top)+dv.(margin-top)=50+30+23+100=203;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><p><strong>第二种情况:子元素dv设置了left:10,top:10.</strong></p><p>子元素#dv的:</p><p>offsetLeft=dv.left+dv.(margin-left)=10+100=110;</p><p>offsetTop=dv.top+dv.(margin-top)=10+100=110;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><p>下面两种是子元素相对定位的情况</p><p><strong>第一种情况:子元素dv没有设置left和top值.</strong></p><p>子元素#dv的:</p><p>offsetLeft=bigdv.(margin-left)+bigdv.(border-left)+bigdv.(padding-left)+dv.(margin-left)=150+30+17+100=297;</p><p>offsetTop=bigdv.(margin-top)+bigdv.(border-top)+bigdv.(padding-top)+dv.(margin-top)=50+30+23+100=203;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><p><strong>第二种情况:子元素dv设置了left:10,top:10.</strong></p><p>子元素#dv的:</p><p>offsetLeft=bigdv.(margin-left)+bigdv.(border-left)+bigdv.(padding-left)+dv.left+dv.(margin-left)=150+30+17+10+100=307;</p><p>offsetTop=bigdv.(margin-top)+bigdv.(border-top)+bigdv.(padding-top)+dv.top+dv.(margin-top)=50+30+23+10+100=213;</p><p>offsetWidth=dv.border+dv.padding+dv.width=20+13+100=133;</p><p>offsetHeight=dv.border+dv.padding+dv.height=20+12+100=132;</p><h4 id="scroll系列-卷曲" tabindex="-1"><a class="header-anchor" href="#scroll系列-卷曲" aria-hidden="true">#</a> scroll系列:卷曲</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">scrollLeft</span><span class="token operator">:</span>元素向左卷曲出去的距离
<span class="token literal-property property">scrollTop</span><span class="token operator">:</span>元素向上卷曲出去的距离
<span class="token literal-property property">scrollWidth</span><span class="token operator">:</span>元素中内容的实际的宽度<span class="token punctuation">,</span>如果没有内容<span class="token punctuation">,</span>或者内容很少<span class="token punctuation">,</span>元素的宽度
<span class="token literal-property property">scrollHeight</span><span class="token operator">:</span>元素中内容的实际的高度<span class="token punctuation">,</span>如果没有内容<span class="token punctuation">,</span>或者内容很少<span class="token punctuation">,</span>元素的高度
<span class="token comment">//时时的获取向上卷曲出去的距离的值</span>

<span class="token comment">//div的滚动事件</span>
<span class="token function">my$</span><span class="token punctuation">(</span><span class="token string">&quot;dv&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function-variable function">onscroll</span><span class="token operator">=</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>scrollTop<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="getscroll兼容代码" tabindex="-1"><a class="header-anchor" href="#getscroll兼容代码" aria-hidden="true">#</a> getScroll兼容代码</h5><p>body、html、window的关系</p><p>window不能用scrollLeft(没有这个属性),用pageYOffset.而且pageYOffset属性是只读的,只能获取,不能设置. <code>documentElement</code>就是html</p><p><code>documentElement</code>和<code>body</code>有scrollLeft这个属性.</p><p>IE6 7 8需要用<code>documentElement</code></p><p>谷歌需要用<code>body</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">getScroll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">left</span><span class="token operator">:</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollLeft <span class="token operator">||</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token literal-property property">top</span><span class="token operator">:</span>window<span class="token punctuation">.</span>pageYOffset <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>scrollTop <span class="token operator">||</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="client系列" tabindex="-1"><a class="header-anchor" href="#client系列" aria-hidden="true">#</a> client系列</h4><p><code>clientWidth</code>:可视区域的宽度,没有边框</p><p><code>clientHeight</code>:可视区域的高度,没有边框</p><p><code>clientLeft</code>:左边框的宽度</p><p><code>clientTop</code>:上边框的宽度</p><p><code>clientX</code>:可视区域的横坐标</p><p><code>clientY</code>:可视区域的纵坐标</p><h2 id="标准库" tabindex="-1"><a class="header-anchor" href="#标准库" aria-hidden="true">#</a> 标准库</h2><h3 id="es6" tabindex="-1"><a class="header-anchor" href="#es6" aria-hidden="true">#</a> ES6</h3><blockquote><p>ES6的模块自动采用严格模式, 不管你有没有在模块头部加上&quot;use strict&quot;;</p></blockquote><p>严格模式主要有以下限制:</p><ul><li>变量必须声明后再使用</li><li>函数的参数不能有同名属性, 否则报错</li><li>不能使用with语句</li><li>不能对只读属性赋值, 否则报错</li></ul><p>例如: 字符串中的length修改是不会改变字符串的</p><ul><li>不能使用前缀0表示八进制数, 否则报错</li><li>不能删除不可删除的属性, 否则报错</li><li>不能删除变量delete prop, 会报错, 只能删除属性delete global[prop]</li><li>eval不会在它的外层作用域引入变量</li><li>eval和arguments不能被重新赋值</li><li>arguments不会自动反应函数参数的变化</li><li>不能使用arguments.callee</li><li>不能使用argument.callee.caller</li><li>禁止this指向全局对象</li><li>不能使用fn.caller和fn.arguments获取函数调用的堆栈</li><li>增加了保留字(比如protected static interface)</li></ul><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> Array</h3><h3 id="数组遍历方法" tabindex="-1"><a class="header-anchor" href="#数组遍历方法" aria-hidden="true">#</a> 数组遍历方法</h3><ul><li>forEach</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>map</li><li>find</li><li>findIndex</li><li>filter 只留下数字的数组</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> ary1 <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span>index</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">==</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ary1<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>some</li></ul><p>只要有一个符合, 结果就是true</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">==</span> <span class="token string">&quot;string&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>every</li></ul><p>只要有一个不符合, 结果就是false</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> ary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> result <span class="token operator">=</span> ary<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">typeof</span> item <span class="token operator">==</span> <span class="token string">&quot;string&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; false</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>reduce</li></ul><p>默认从左边开始 迭代</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// prev    item     prev+item</span>
<span class="token comment">//  1       2       1+2</span>
<span class="token comment">//  1+2     3       1+2+3</span>
<span class="token comment">//.....</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>reduceRight</li></ul><p>默认从右边开始</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr1<span class="token punctuation">.</span><span class="token function">reduceRight</span><span class="token punctuation">(</span><span class="token parameter">prev<span class="token punctuation">,</span>item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> prev <span class="token operator">+</span> item<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="数组空位" tabindex="-1"><a class="header-anchor" href="#数组空位" aria-hidden="true">#</a> 数组空位</h3><p>数组的项中没有值, 就表示空位.</p><p>undefied和null是不是空位, [undefined, null]没有空位</p><p>arr = [,1,, 5,]</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token comment">// 用in可以查看对象中是否有该属性, 对于数组来说它的索引可以直接查看该位置是否有值</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//=&gt; false</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//=&gt; true</span>

arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//=&gt; 1 5</span>

arr<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token comment">//=&gt; undefined 1 undefined 5</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>浏览器也可以显示出空位</p><p><img src="`+p+`" alt="1553308650534"></p><h3 id="set和map" tabindex="-1"><a class="header-anchor" href="#set和map" aria-hidden="true">#</a> set和map</h3><p>set和map是新的数据类型</p><p>set和数组类似 就是类数组</p><p>map和对象类似</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;aa&quot;</span><span class="token punctuation">,</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span>
<span class="token comment">//=&gt; 类数组</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+e+`" alt="1553440505355"></p><p>Set会自动去重, 会把相同的项删除掉, 复杂数据类型会拿地址比较, 两个NaN虽然普通比较会不相等.但是Set用了Object.is()方法, 此时NaN是相等的.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=&gt; [NaN, 1, 12, 3, 32]</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">is</span><span class="token punctuation">(</span><span class="token number">NaN</span><span class="token punctuation">,</span><span class="token number">NaN</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//=&gt; true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>set对象的方法</p><h4 id="add" tabindex="-1"><a class="header-anchor" href="#add" aria-hidden="true">#</a> add()</h4><h3 id="es6的模块导入与导出" tabindex="-1"><a class="header-anchor" href="#es6的模块导入与导出" aria-hidden="true">#</a> ES6的模块导入与导出</h3><h3 id="export" tabindex="-1"><a class="header-anchor" href="#export" aria-hidden="true">#</a> export</h3><p>export后必须跟语句，如声明、for、if等都是语句，export不能导出匿名函数，也不能导出某个已经声明的变量，如：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span>
<span class="token keyword">export</span> bar<span class="token punctuation">;</span> <span class="token comment">// 非法</span>
<span class="token keyword">export</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 非法</span>
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 合法，后跟的是声明语句</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 合法，后面跟的{}理解为语句，就像if后面的{}一样</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token keyword">as</span> bar<span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 合法</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 非法，后面的{}被解析成对象</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="export-default" tabindex="-1"><a class="header-anchor" href="#export-default" aria-hidden="true">#</a> export default</h3><p>export default在整个模块中只能出现一次，后只能是具体的值，如1,2,3,再比如一个函数声明（非表达式），或者是一个类声明（与函数声明一个意思），或者匿名函数，只要是能用变量接收的都可以</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">//合法</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 合法，因为function foo()能被变量接收， 如 var bar = function () {}</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 非法，因为var a = const bar = 1;是不合法的</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// 合法，{}被理解为一个对象</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span> <span class="token literal-property property">foo</span><span class="token operator">:</span> foo <span class="token punctuation">}</span> <span class="token comment">// 合法</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出语句只能出现在模块的顶级作用域中，不能被其他语句包括</p><h3 id="import" tabindex="-1"><a class="header-anchor" href="#import" aria-hidden="true">#</a> import</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span>x<span class="token punctuation">,</span>y<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./test.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> some <span class="token keyword">from</span> <span class="token string">&#39;./test.js&#39;</span><span class="token punctuation">;</span> <span class="token comment">// 命名空间导入</span>
<span class="token keyword">import</span> <span class="token string">&#39;./test.js&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span><span class="token keyword">default</span> <span class="token keyword">as</span> test<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./test.js&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导入再导出" tabindex="-1"><a class="header-anchor" href="#导入再导出" aria-hidden="true">#</a> 导入再导出</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token punctuation">{</span>some<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./test.js&#39;</span>
<span class="token keyword">export</span> <span class="token operator">*</span> form <span class="token string">&#39;./test.js&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,233),l=[c];function i(u,r){return s(),a("div",null,l)}const k=n(o,[["render",i],["__file","index.html.vue"]]);export{k as default};
