import{_ as s,n as c,p as l,q as p,s as o,R as e,t as n,Z as t}from"./framework-fdd38eac.js";const a="/assets/1544240649198-0e9eb9c8.png",d="/assets/1544240649199-3decd86f.png",r="/assets/nodejs窗口-c01c2a57.png",g="/assets/地址栏中输入cmd-da7adf8a.png",u="/assets/shift鼠标右键-211d70e6.png",m="/assets/1544240649196-e2f3fa90.png",b="/assets/1544240649197-e4a4f3f0.png",h="/assets/1544157932878-f9b740da.png",_="/assets/1544159272863-f67255de.png",q="/assets/1544159302887-e1106229.png",k="/assets/1544159326182-32e3bc8b.png",x="/assets/1544159351275-3865e0a9.png",f="/assets/1544159395175-3676f976.png",v="/assets/1544159487679-4192004e.png",w="/assets/1544160031381-1dfea56b.png",S="/assets/1544160048688-869e3e03.png",$="/assets/1544160083110-b9b21ecf.png",D="/assets/1544160108738-b7153a37.png",E="/assets/1544160133214-92fd6a50.png",y="/assets/1544160149107-c60870dc.png",A="/assets/1544160172891-902bf519.png",L="/assets/1544160182339-1c0c8f8c.png",j="/assets/1544160384351-f2cffe6b.png",N="/assets/1544160860316-95f0428e.png",B="/assets/1544167943764-c22da30c.png",O="/assets/1544187637943-0ba3f975.png",V="/assets/1544174192724-27535cd2.png",R="/assets/1544174635504-a13cec35.png",C="/assets/1544178872930-68038dac.png",H="/assets/1544202962759-73127e6a.png",I="/assets/1544189383002-12c87873.png",P="/assets/1544191223360-6e7cb08d.png",G="/assets/1544191133576-35704977.png",T="/assets/1544199364772-5d4fd889.png",J="/assets/1544199643411-be13fbc4.png",W="/assets/1544201321570-9ffc4613.png",X="/assets/1544202126144-e26f24cc.png",U="/assets/1544238640932-fc6d66cc.png",z="/assets/1544238731405-f5148a87.png",F="/assets/1544239006467-65e512cb.png",Z="/assets/1544240506948-95397638.png",K="/assets/1523420219303-d012f661.png",M="/assets/1523420292109-76d225d2.png",Q="/assets/1523420338083-0010ada5.png",Y={},ee=t('<h1 id="git和node的安装和使用" tabindex="-1"><a class="header-anchor" href="#git和node的安装和使用" aria-hidden="true">#</a> git和node的安装和使用</h1><h2 id="node安装" tabindex="-1"><a class="header-anchor" href="#node安装" aria-hidden="true">#</a> node安装</h2><p>官网:https://nodejs.org/zh-cn/</p><ul><li>推荐使用LTS稳定版本，把安装包下载下来后，直接一路下一步安装即可（最好把它安装到C盘 [默认盘符] ，记好安装目录）</li></ul><blockquote><ol><li>如果安装不了，我们可以把别人安装完成的内容拷贝过来，通过修改环境变量完成安装 高级系统设置 -&gt; 环境变量 -&gt; 系统变量 -&gt; Path，把原有的变量值备份一份，在原有的基础上增加node的安装目录即可</li></ol></blockquote><p><img src="'+a+'" alt="Alt text"></p><blockquote><ol start="2"><li>验证安装是否成功 WIN + R =&gt; 打开运行窗口 =&gt; 输入cmd =&gt; 打开DOS窗口 在DOS窗口中，输入 node -v / node --version / npm -v 能出现版本号，则代表安装成功，不能出现版本号，提示node不是内部或者外部命令的，遵循第一步配置环境变量即可</li></ol></blockquote><p><img src="'+d+'" alt="Alt text"></p><h2 id="node基础概念" tabindex="-1"><a class="header-anchor" href="#node基础概念" aria-hidden="true">#</a> node基础概念</h2><ul><li><p>node并不是一门语言，它是一个工具或者环境</p></li><li><p>特点:</p></li></ul><blockquote><p>基于V8引擎（webkit）渲染和解析JS的 单线程 无阻塞I/O操作 事件驱动 ...</p></blockquote><p>之所以把node称之为服务器端语言，是因为node给予JS操作服务器的能力：我们在服务器端安装node，只用js完成服务器端需要处理的一些事情，最后把写好的js代码交给node环境运行即可</p><h3 id="在node环境中把js代码执行" tabindex="-1"><a class="header-anchor" href="#在node环境中把js代码执行" aria-hidden="true">#</a> 在node环境中把JS代码执行</h3><ul><li>REPL命令（Read-Evaluate-Print-Loop：输入-求值-输出-循环）</li></ul><blockquote><ol><li>Node.js command prompt窗口打开只输入一个node,回车, 就和浏览器F12的console一样.(不常用)</li></ol></blockquote><img src="'+r+'"><blockquote><ol start="2"><li>在运行cmd中窗口输入node, 和Node.js command prompt窗口输入node效果一样.(不常用)</li></ol></blockquote><ul><li>基于 node xxx.js 命令执行</li></ul><blockquote><p>基于node命令执行，我们需要先找到当前文件所在的文件夹，然后在这个目录下打开DOS窗口，在窗口中执行 node xxx.js，这样就相当于在node环境下把JS文件中的代码执行了 如何在当前文件目录中打开DOS窗口</p></blockquote><blockquote><ol><li>基于DOS命令中的“cd”一层层进入</li></ol></blockquote><blockquote><ol start="2"><li>在当前目录地址栏中输入cmd，快速在当前目录打开</li></ol></blockquote><img src="'+g+'"><blockquote><ol start="3"><li>shift+鼠标右键，在此处打开命令窗口 <img src="'+u+'"></li></ol></blockquote><ul><li>基于WB(webstrom)这类编辑工具直接执行</li></ul><blockquote><p>在WB中配置node环境 <img src="'+m+'" alt="Alt text"><img src="'+b+'" alt="Alt text"></p></blockquote><h2 id="扫盲-常用的dos命令" tabindex="-1"><a class="header-anchor" href="#扫盲-常用的dos命令" aria-hidden="true">#</a> 扫盲：常用的DOS命令</h2><p><code>ping www.baidu.com</code>: 测三次出结果</p><p><code>ping www.baidu.com -t</code>：测试网速 <code>Ctrl+c</code>：结束当前正在运行的操作 <code>exit</code>：退出当前窗口 <code>ipconfig -all</code>：查看当前电脑的 物理地址/IP地址/子网掩码/DNS等信息 <code>cls</code>：清屏 <code>cd</code>：进入到指定的文件目录（windows电脑需要先进入到对应的磁盘 <code>E:</code>） <code>cd ../</code>：返回上级目录 <code>cd ./</code>：当前目录 <code>cd /</code>：根目录 <code>dir</code>：查看当前目录下所有的文件 linux用<code>ls</code><code>mkdir</code>：创建文件夹</p><p><code>rmdir xxx</code>：删除文件夹</p><p><code>copy con xxx.xx</code>：创建文件并且给文件中输入内容，输入完成后，用Ctrl+c结束并保存 <code>del xxx.xx</code>：删除文件 linux用<code>rm</code></p><h2 id="git的基础知识" tabindex="-1"><a class="header-anchor" href="#git的基础知识" aria-hidden="true">#</a> git的基础知识</h2><h3 id="集中式版本控制系统" tabindex="-1"><a class="header-anchor" href="#集中式版本控制系统" aria-hidden="true">#</a> 集中式版本控制系统</h3><blockquote><p>集中式开发：是将项目集中存放在中央服务器中，在工作的时候，大家只在自己电脑上操作，从同一个地方下载最新版本，然后开始工作，做完的工作再提交给中央服务器保存。这种方式需要联网，现在云开发就是这样的处理方式。</p><p><code>svn</code>：在git诞生前就已经存在的版本控制系统，不过它是“集中式”管理</p></blockquote><h3 id="分布式版本控制系统" tabindex="-1"><a class="header-anchor" href="#分布式版本控制系统" aria-hidden="true">#</a> 分布式版本控制系统</h3><blockquote><p>分布式开发：只要提供一台电脑作为版本集中存的服务器放就够了，但这个服务器的作用仅仅是用来方便“交换”大家的修改，没有它也一样干活，只是交换修改不方便而已。而每一台电脑有各自独立的开发环境，不需要联网，本地直接运行，相对集中式安全系数高很多。</p><p><code>git</code>：是分布式版本管理系统</p></blockquote><ul><li>git是一个分布式代码版本管理控制系统</li></ul><blockquote><p>记录当前产品代码的所有版本信息（历史修改信息）,而且方便快速回退到某一个具体的版本</p><p>方便团队协作开发，能够检测代码冲突，能够合并代码等</p><p>(linux作者开发的, linux系统初期 有一个和svn同样的系统版本管理工具, 为linux社区做服务, 后来这个版本管理工具的作者和linux的作者有了矛盾, linux作者用了三年的事件开发了git)</p></blockquote><h3 id="集中式和分布式的区别" tabindex="-1"><a class="header-anchor" href="#集中式和分布式的区别" aria-hidden="true">#</a> 集中式和分布式的区别</h3><p><img src="'+h+'" alt="1544157932878"></p><ul><li>git 和 svn 的区别</li></ul><blockquote><ol><li><p>传输方式上</p><p>git 是以数据流的形式上传下载(传输速率快)</p><p>svn 是正常形式的上传下载</p></li><li><p>集中式和分布式的区别</p></li></ol></blockquote><h2 id="git的工作管理和基础操作" tabindex="-1"><a class="header-anchor" href="#git的工作管理和基础操作" aria-hidden="true">#</a> git的工作管理和基础操作</h2><h3 id="windows-git安装" tabindex="-1"><a class="header-anchor" href="#windows-git安装" aria-hidden="true">#</a> windows git安装</h3><blockquote><p>windows下载使用很多Linux/Unix的工具时, 需要cygwin这样的模拟环境, git也一样, cygwin的安装和配置都比较复杂. 不过有人已经把模拟环境和git都打包好了,叫做msysgit, 只需要下载一个单独的exe安装程序安装即可.</p><p>msysgit 是windows版的Git, 官网(http://git-scm.com).</p></blockquote><p><img src="'+_+'" alt="1544159272863"></p><p><img src="'+q+'" alt="1544159302887"></p><p><img src="'+k+'" alt="1544159326182"></p><p><img src="'+x+'" alt="1544159351275"></p><p><img src="'+f+'" alt="1544159395175"></p><p><img src="'+v+'" alt="1544159487679"></p><blockquote><p>第一个是只能使用右键 Git Bash 运行git 命令</p><p>第二个是可以在cmd 里面使用git 命令</p><p>第三个是可以在cmd 里面使用git 命令 和Unix系统的命令(可以勾选)</p></blockquote><p><img src="'+w+'" alt="1544160031381"></p><p><img src="'+S+'" alt="1544160048688"></p><p><img src="'+$+'" alt="1544160083110"></p><p><img src="'+D+'" alt="1544160108738"></p><p><img src="'+E+'" alt="1544160133214"></p><p><img src="'+y+'" alt="1544160149107"></p><p><img src="'+A+'" alt="1544160172891"></p><p><img src="'+L+'" alt="1544160182339"></p><blockquote><p>检查安装是否成功</p></blockquote><h3 id="mac-git安装" tabindex="-1"><a class="header-anchor" href="#mac-git安装" aria-hidden="true">#</a> mac git安装</h3><ul><li>两种办法</li></ul>',62),oe={href:"http://brew.sh/",target:"_blank",rel:"noopener noreferrer"},te=o("code",null,"brew install git",-1),ie=t('<p><img src="'+j+'" alt="1544160384351"></p><blockquote><ol start="2"><li>直接从 AppStore 安装Xcode，Xcode集成了Git，不过默认没有安装，你需要运行Xcode，选择菜单“Xcode”-&gt;“Preferences”，在弹出窗口中找到“Downloads”，选择“Command Line Tools”，点“Install”就可以完成安装了。</li></ol></blockquote><p><img src="'+N+'" alt="1544160860316"></p><h3 id="创建git仓库" tabindex="-1"><a class="header-anchor" href="#创建git仓库" aria-hidden="true">#</a> 创建git仓库</h3><ul><li>在git配置一些基础信息</li></ul><blockquote><p>初次使用git，先在本地配置一些基础信息, 初次使用是没有user.name 和 user.email</p><p>$在Git Bash Here里面就有, 不用自己写. 在DOS窗口下也不用写 $, 直接执行即可.</p><p>git 是不支持简写的</p><p>$ git config -l (字母L)</p><p>查看用户名和邮箱地址：</p><p><code>$ git config user.name</code></p><p><code>$ git config user.email</code></p><p>修改用户名和邮箱地址：</p><p><code>$ git config --global user.name &quot;xxx&quot;</code></p><p><code>$ git config --global user.email &quot;xxx&quot;</code> 建议大家配置的用户名和邮箱和gitHub保持一致（这样以后在本地向gitHub推送内容的时候，能够展示出是谁推荐的）</p></blockquote><ul><li>创建git仓库</li></ul><blockquote><ol><li><p><code>git init</code></p><p>会在当前目录中创建一个空的仓库，文件目录中生成一个 “.git” 的隐藏文件，这个文件很重要，我们本地仓库的版本信息等都存储在这里</p></li></ol></blockquote><p><img src="'+B+`" alt="1544167943764"></p><blockquote><ol start="2"><li>.gitignore 文件的创建 在当前目录（git仓库根目录）创建一个 “.gitignore” 文件，这个文件中存储了当git提交的时候所忽略的文件</li></ol><p>可以基于WB创建（new -&gt; file -&gt; 新建文件没有文件名只有后缀的.gitignore） 可以基于linux命令 <code>$ touch .gitignore</code> （mac终端、git bash、或者集成了linux的dos，可以使用linux命令）</p></blockquote><ul><li>.gitignore 文件中需要忽略的文件或文件夹, 这些文件或文件夹不会提交</li></ul><blockquote><p># 是 注释 没什么意义</p><p>/ 是指根目录, /converage 和 /build 指根目录的 coverage 和 build 文件夹不提交</p><p>node_modules 文件夹不提交</p><p># misc 下指的是 mac 里面有时候会生成这些文件, 这些文件也不提交</p><p># npm or yarn 指 npm 和 yarn 安装出错生成的文件, 这些文件也不提交</p><p># webStorm 指 用webStrom 打开项目的时候会生成 .idea 文件夹, 这个文件夹也不提交</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># dependencies
node_modules

# testing
/coverage

# production
/build

# misc
.DS_Store
.env.local
.env.development.local
.env.test.local
.env.production.local

# npm or yarn
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# webStorm
.idea
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="git工作原理及操作" tabindex="-1"><a class="header-anchor" href="#git工作原理及操作" aria-hidden="true">#</a> git工作原理及操作</h2><p>当我们在本地创建一个git仓库后，我们可以基于这个仓库管理我们的代码</p><ul><li>git的工作流程</li></ul><blockquote><p>每一个git仓库都划分为三个区域:</p><p>工作区：编辑代码的地方</p><p>暂存区：临时存储要生成版本代码的地方</p><p>历史区：存储的是生成的每一个版本代码</p></blockquote><p><img src="`+O+'" alt="1544187637943"></p><ul><li>工作区提交到暂存区</li></ul><blockquote><p><code>$ git status</code> 查看代码或者文件的状态（当前处于哪个区域）:</p><p>红色（当前处于工作区，还没有提交到暂存区）</p><p>绿色（当前处于暂存区，还没有提交到历史区）</p><p>如果没有文件，代表三个区域代码已经同步，历史版本也在历史区生成了</p></blockquote><p><img src="'+V+'" alt="1544174192724"></p><blockquote><p><code>$ git add [filename]</code></p><p>可以单独提交一个文件</p><p><img src="'+R+'" alt="1544174635504"></p><p><code>$ git add .</code></p><p><code>$ git add -A</code> 把当前工作区中所有最新修改的文件，都提交到暂存区 <img src="'+C+'" alt="1544178872930"></p></blockquote><ul><li>暂存区到历史区</li></ul><blockquote><p><strong>不推荐 麻烦</strong></p><p><code>$ git commit</code> 这样执行后，会弹出一个提交文本输入界面，需要我们编写本次提交到历史区，给当前版本编写的备注信息</p><p>先按 i 进入编辑插入模式 输入备注信息 按ESC 输入“ :wq ” 保存并退出(write quit)</p><p>(可以不写备注,直接 esc :wq 退出)</p></blockquote><blockquote><p><strong>推荐</strong></p><p><code>$ git commit -m&#39;自己需要编写的备注信息&#39;</code>(-m后面可以加空格)</p><p><img src="'+H+'" alt="1544202962759"></p><p><code>$ git log</code> 查看当前历史区提交的记录（查看版本信息）</p><p><img src="'+I+'" alt="1544189383002"></p></blockquote><blockquote><p>不推荐,因为github有图形化界面, 更直观.</p><p><code>$ git diff</code> 工作区 VS 暂存区</p><p><code>$ git diff master</code> 工作区 VS 历史区（master分支）</p><p><code>$ git diff --cached</code> 暂存区 VS 历史区</p></blockquote><h2 id="git和github同步" tabindex="-1"><a class="header-anchor" href="#git和github同步" aria-hidden="true">#</a> git和gitHub同步</h2><h3 id="建立关联" tabindex="-1"><a class="header-anchor" href="#建立关联" aria-hidden="true">#</a> 建立关联</h3><ul><li>让本地的git仓库和远程仓库建立关联(一般本地仓库只和一个远程仓库关联)</li></ul><blockquote><p><code>$ git remote -v</code> 查看所有的关联信息</p></blockquote><p><img src="'+P+'" alt="1544191223360"></p><blockquote><p><code>$ git remote add xxx [远程仓库git地址]</code></p><p>常使用github的HTTPS地址</p><p>建立关联</p></blockquote><p><img src="'+G+'" alt="1544191133576"></p><blockquote><p><code>$ git remote remove xxx</code> 移除关联</p><p>我们远程仓库关联在一起的名字默认是：origin，当然自己可以随意修改</p></blockquote><h3 id="拉取推送github信息" tabindex="-1"><a class="header-anchor" href="#拉取推送github信息" aria-hidden="true">#</a> 拉取推送github信息</h3><ul><li>把本地的信息推送到远程仓库上，或者从远程仓库上拉取最新的信息到本地仓库</li></ul><blockquote><p>我们本地推送和拉取的信息，既有代码也有版本信息，所以说与其说是推送和拉取，不如说是和远程仓库保持信息的同步</p></blockquote><blockquote><p>在推送之前，我们都应该先拉取 <code>$ git pull origin master</code></p><p>（origin这个名字就是和远程仓库关联的这个名字，以自己设置的为主） 从远程仓库的master分支拉取最新的信息</p><p>该图是新new repository 的, 里面是空的, 所以pull会没有东西</p></blockquote><p><img src="'+T+'" alt="1544199364772"></p><blockquote><p><code>$ git push origin master</code> 把自己本地信息推送到远程仓库的master分支下, 第一次push需要填写github的账号和密码.</p></blockquote><p><img src="'+J+'" alt="1544199643411"></p><p><img src="'+W+'" alt="1544201321570"></p><blockquote><p>如果电脑有自主记忆的过程, 就不需要输入账号和密码. 否则每push一次就输入一次账号和密码.</p></blockquote><p><img src="'+X+'" alt="1544202126144"></p><h3 id="真实开发流程" tabindex="-1"><a class="header-anchor" href="#真实开发流程" aria-hidden="true">#</a> 真实开发流程</h3><ul><li>以上是操作知识点，真实项目开发流程</li></ul><blockquote><ol><li>LEADER会首先创建一个远程仓库（这个仓库可能是空的，也可能是包含了项目需要的基础的结构信息）</li></ol><p>LEADER 会直接在github上 New repository, 先创建一个新仓库, 可能还再加一些基础的结构信息</p></blockquote><blockquote><ol start="2"><li>作为开发者，我们需要在本地创建一个本地仓库，还需要让当前本地的仓库和远程仓库保持关联, 或者直接克隆github上的远程仓库, 克隆到本地.</li></ol></blockquote><blockquote><p>原始做法：</p><p>git init</p><p>git remote add origin [git仓库地址]</p></blockquote><blockquote><p>简单做法：</p><p>git clone [远程仓库地址] [克隆后的名字：可以不设置，默认是仓库名]</p></blockquote><p><img src="'+U+'" alt="1544238640932"></p><blockquote><p>自动创建好本地仓库, 并且和远程仓库关联了</p></blockquote><p><img src="'+z+'" alt="1544238731405"></p><p><img src="'+F+'" alt="1544239006467"></p><blockquote><ol start="3"><li>在本地开发产品，需要同步的时候，我们首先把工作区内容在本地仓库中放到历史区，生成版本信息（git add . / git commit -m&#39;&#39;），在把本地历史区的信息推送到远程仓库上（git pull / git push）</li></ol></blockquote><blockquote><ol start="4"><li>在团队协作开发的时候，LEADER会在自己的gitHub账号下创建一个远程仓库，那么团队其他成员在向这个远程仓库推送信息的时候，使用自己的账号是没有推送权限的，我们需要把当前这个远程仓库，在github中创建工作群组，让更多人用自己的账号也有操作权限</li></ol><p><img src="'+Z+'" alt="1544240506948"></p><p>邀请之后有取消邀请字样</p><p><img src="'+K+'" alt="Alt text"> 小组成员在自己的邮箱中收到一封邀请邮件，需要确认同意 <img src="'+M+'" alt="Alt text"></p></blockquote><blockquote><p>这样就是加入成功了</p></blockquote><p><img src="'+Q+'" alt="Alt text"></p>',58);function se(ce,le){const i=c("ExternalLinkIcon");return l(),p("div",null,[ee,o("blockquote",null,[o("p",null,[e("1、安装 homebrew ，然后通过homebrew安装Git。先打开网站 "),o("a",oe,[e("http://brew.sh/"),n(i)]),e("。 拷贝对应脚本到终端下安装homebrew，然后在终端执行"),te,e("的命令。")])]),ie])}const ne=s(Y,[["render",se],["__file","index.html.vue"]]);export{ne as default};
