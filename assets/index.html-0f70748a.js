import{_ as a,p as s,q as t,R as e,Z as n}from"./framework-fdd38eac.js";const p="/assets/lei-fca07991.png",i="/assets/shs-2103a6f8.png",c="/assets/line1-d4cf5304.png",o="/assets/line2-99d1a6ab.png",l="/assets/1-3be4ed22.png",d="/assets/box-c5ee3d21.png",r="/assets/boxs-f63d464f.png",u="/assets/n-a79f3c47.png",h="/assets/n-f7449b74.jpg",k="/assets/no-6789225c.jpg",v="/assets/163-955c64f3.png",m="/assets/1633-3a752092.png",g="/assets/fontt-8925c168.png",b="/assets/03-19fd14f4.jpg",f="/assets/1498032122244-2adbbde0.png",x="/assets/fontt5-b6ac1894.png",y="/assets/box-a3e7d878.gif",S="/assets/fu-44d5ae8d.jpg",C="/assets/ma-7978a5b7.png",q="/assets/1555296613463-05cc2a5d.png",_={},F=n(`<h1 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h1><h2 id="css引入方式-四种" tabindex="-1"><a class="header-anchor" href="#css引入方式-四种" aria-hidden="true">#</a> CSS引入方式（四种）</h2><h3 id="内部样式表-嵌入式" tabindex="-1"><a class="header-anchor" href="#内部样式表-嵌入式" aria-hidden="true">#</a> 内部样式表(嵌入式)</h3><p>将CSS样式表放到head中用<code>&lt;style&gt;</code>标签包裹起来</p><p>基本语法格式如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
        ...此处写CSS样式
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>语法中，style标签一般位于head标签中title标签之后，也可以把他放在HTML文档的任何地方。</p><p>type=&quot;text/css&quot; 在html5中可以省略， 写上也比较符合规范， 所以这个地方可以写也可以省略。</p><h3 id="行内式-内联样式" tabindex="-1"><a class="header-anchor" href="#行内式-内联样式" aria-hidden="true">#</a> 行内式（内联样式）</h3><p>内联样式，又有人称行内样式、行间样式、内嵌样式。是通过标签的style属性来设置元素的样式，其基本语法格式如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>标签名</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">属性1</span><span class="token punctuation">:</span>属性值1<span class="token punctuation">;</span> <span class="token property">属性2</span><span class="token punctuation">:</span>属性值2<span class="token punctuation">;</span> <span class="token property">属性3</span><span class="token punctuation">:</span>属性值3<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span> 内容 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>标签名</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>语法中style是标签的属性，实际上任何HTML标签都拥有style属性，用来设置行内式。其中属性和值的书写规范与CSS样式规则相同，行内式只对其所在的标签及嵌套在其中的子标签起作用。</p><h3 id="外部样式表-外链式" tabindex="-1"><a class="header-anchor" href="#外部样式表-外链式" aria-hidden="true">#</a> 外部样式表（外链式）</h3><p>链接式引入：将一个独立的.css文件引入到HTML文件中，使用<code>&lt;link&gt;</code>标记写在<code>&lt;head&gt;</code>标记中。 链接式会以网页文件主体装载前装载CSS文件。</p><p>其基本语法格式如下：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>CSS文件的路径<span class="token punctuation">&quot;</span></span>  <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： link 是个单标签!</p><p>该语法中，link标签需要放在head头部标签中，并且必须指定link标签的三个属性，具体如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>href：定义所链接外部样式表文件的URL，可以是相对路径，也可以是绝对路径。
type：定义所链接文档的类型，在这里需要指定为“text/css”，表示链接的外部文件为CSS样式表。
rel：定义当前文档与被链接文档之间的关系，在这里需要指定为“stylesheet”，表示被链接的文档是一个样式表文件。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="导入方式" tabindex="-1"><a class="header-anchor" href="#导入方式" aria-hidden="true">#</a> 导入方式</h3><p>导入式： 将一个独立的.css文件引入HTML文件中，导入式使用@import 引入外部CSS文件，<code>&lt;style&gt;</code>标记也是写在<code>&lt;head&gt;</code>标记中。 导入式会在整个网页装载完后再装载CSS文件。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    ...
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/css<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
        <span class="token atrule"><span class="token rule">@import</span> <span class="token string">&quot;My.css&quot;</span><span class="token punctuation">;</span></span> 此处注意.css文件的路径
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="三种样式表总结-位置" tabindex="-1"><a class="header-anchor" href="#三种样式表总结-位置" aria-hidden="true">#</a> 三种样式表总结（位置）</h3><table><thead><tr><th>样式表</th><th>优点</th><th>缺点</th><th>使用情况</th><th>控制范围</th></tr></thead><tbody><tr><td>行内样式表</td><td>书写方便，权重高</td><td>没有实现样式和结构相分离</td><td>较少</td><td>控制一个标签（少）</td></tr><tr><td>内部样式表</td><td>部分结构和样式相分离</td><td>没有彻底分离</td><td>较多</td><td>控制一个页面（中）</td></tr><tr><td>外部样式表</td><td>完全实现结构和样式相分离</td><td>需要引入</td><td>最多，强烈推荐</td><td>控制整个站点（多）</td></tr></tbody></table><h2 id="css基础选择器" tabindex="-1"><a class="header-anchor" href="#css基础选择器" aria-hidden="true">#</a> CSS基础选择器</h2><h3 id="标签选择器-元素选择器" tabindex="-1"><a class="header-anchor" href="#标签选择器-元素选择器" aria-hidden="true">#</a> 标签选择器（元素选择器）</h3><p>标签选择器是指用HTML标签名称作为选择器，按标签名称分类，为页面中某一类标签指定统一的CSS样式。</p><p>其基本语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>标签名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }  或者
元素名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>标签选择器最大的优点是能快速为页面中同类型的标签统一样式，同时这也是他的缺点，不能设计差异化样式。</p><h3 id="类选择器" tabindex="-1"><a class="header-anchor" href="#类选择器" aria-hidden="true">#</a> 类选择器</h3><p>类选择器使用“.”（英文点号）进行标识，后面紧跟类名</p><p>其基本语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>.类名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>类选择器最大的优势是可以为元素对象定义单独或相同的样式。 可以选择一个或者多个标签。</p><blockquote><p>小技巧：</p><p>1.长名称或词组可以使用中横线来为选择器命名。 2.不建议使用“_”下划线来命名CSS选择器。 浏览器兼容问题 (比如使用_tips的选择器命名，在IE6是无效的) 能良好区分JavaScript变量命名(js变量命名是用“_”) 3.不要纯数字、中文等命名， 尽量使用英文字母来表示。</p></blockquote><p>命名规范： 见附件（Web前端开发规范手册.doc）</p><p>命名是我们通俗约定的，但是没有规定必须用这些常用的命名。</p><h3 id="多类名选择器" tabindex="-1"><a class="header-anchor" href="#多类名选择器" aria-hidden="true">#</a> 多类名选择器</h3><p>我们可以给标签指定多个类名，从而达到更多的选择目的。</p><img src="`+p+`"><blockquote><p>注意：</p><ol><li>样式显示效果跟HTML元素中的类名先后顺序没有关系,受CSS样式书写的上下顺序有关。</li><li>各个类名中间用空格隔开。</li></ol></blockquote><p>多类名选择器在后期布局比较复杂的情况下，还是较多使用的。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>pink fontWeight font20<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>亚瑟<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font20<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>刘备<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font14 pink<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>安其拉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>font14<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>貂蝉<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="id选择器" tabindex="-1"><a class="header-anchor" href="#id选择器" aria-hidden="true">#</a> id选择器</h3><p>id选择器使用“#”进行标识，后面紧跟id名</p><p>其基本语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#id名{属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>该语法中，id名即为HTML元素的id属性值，大多数HTML元素都可以定义id属性，元素的id值是唯一的，只能对应于文档中某一个具体的元素。</p><p>用法基本和类选择器相同。</p><h3 id="id选择器和类选择器区别" tabindex="-1"><a class="header-anchor" href="#id选择器和类选择器区别" aria-hidden="true">#</a> id选择器和类选择器区别</h3><p>W3C标准规定，在同一个页面内，不允许有相同名字的id对象出现，但是允许相同名字的class。</p><p>类选择器（class） 好比人的名字， 是可以多次重复使用的， 比如 张伟 王伟 李伟 李娜</p><p>id选择器 好比人的身份证号码， 全中国是唯一的， 不得重复。 只能使用一次。</p><p><strong>id选择器和类选择器最大的不同在于 使用次数上。</strong></p><h3 id="通配符选择器" tabindex="-1"><a class="header-anchor" href="#通配符选择器" aria-hidden="true">#</a> 通配符选择器</h3><p>通配符 选择器用“*”号表示，他是所有选择器中作用范围最广的，能匹配页面中所有的元素。其基本语法格式如下：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>* { 属性1:属性值1; 属性2:属性值2; 属性3:属性值3; }
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>例如下面的代码，使用通配符选择器定义CSS样式，清除所有HTML标记的默认边距。</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
  <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>                    <span class="token comment">/* 定义外边距*/</span>
  <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>                   <span class="token comment">/* 定义内边距*/</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="css-unicode字体" tabindex="-1"><a class="header-anchor" href="#css-unicode字体" aria-hidden="true">#</a> CSS Unicode字体</h3><p>在 CSS 中设置字体名称，直接写中文是可以的。但是在文件编码（GB2312、UTF-8 等）不匹配时会产生乱码的错误。xp 系统不支持 类似微软雅黑的中文。</p><p>方案一： 你可以使用英文来替代。 比如 font-family:&quot;Microsoft Yahei&quot;。</p><p>方案二： 在 CSS 直接使用 Unicode 编码来写字体名称可以避免这些错误。使用 Unicode 写中文字体名称，浏览器是可以正确的解析的。 font-family: &quot;\\5FAE\\8F6F\\96C5\\9ED1&quot;，表示设置字体为“微软雅黑”。</p><img src="`+i+`"><p>可以通过escape() 来测试属于什么字体。</p><table><thead><tr><th>字体名称</th><th>英文名称</th><th>Unicode 编码</th></tr></thead><tbody><tr><td>宋体</td><td>SimSun</td><td>\\5B8B\\4F53</td></tr><tr><td>新宋体</td><td>NSimSun</td><td>\\65B0\\5B8B\\4F53</td></tr><tr><td>黑体</td><td>SimHei</td><td>\\9ED1\\4F53</td></tr><tr><td>微软雅黑</td><td>Microsoft YaHei</td><td>\\5FAE\\8F6F\\96C5\\9ED1</td></tr><tr><td>楷体_GB2312</td><td>KaiTi_GB2312</td><td>\\6977\\4F53_GB2312</td></tr><tr><td>隶书</td><td>LiSu</td><td>\\96B6\\4E66</td></tr><tr><td>幼园</td><td>YouYuan</td><td>\\5E7C\\5706</td></tr><tr><td>华文细黑</td><td>STXihei</td><td>\\534E\\6587\\7EC6\\9ED1</td></tr><tr><td>细明体</td><td>MingLiU</td><td>\\7EC6\\660E\\4F53</td></tr><tr><td>新细明体</td><td>PMingLiU</td><td>\\65B0\\7EC6\\660E\\4F53</td></tr></tbody></table><p>为了照顾不同电脑的字体安装问题，我们尽量只使用宋体和微软雅黑中文字体</p><h4 id="链接伪类选择器" tabindex="-1"><a class="header-anchor" href="#链接伪类选择器" aria-hidden="true">#</a> 链接伪类选择器</h4><ul><li><p>:link /* 未访问的链接 */</p></li><li><p>:visited /* 已访问的链接 */</p></li><li><p>:hover /* 鼠标移动到链接上 */</p></li><li><p>:active /* 选定的链接 */</p><p>注意:他们的顺序尽量不要颠倒 按照 lvha 的顺序。 love hate 爱上了讨厌 记忆法 或者 lv 包包 非常 hao</p></li></ul><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">a</span> <span class="token punctuation">{</span>   <span class="token comment">/* a是标签选择器  所有的链接 */</span>
			<span class="token property">font-weight</span><span class="token punctuation">:</span> 700<span class="token punctuation">;</span>
			<span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
			<span class="token property">color</span><span class="token punctuation">:</span> gray<span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
<span class="token selector">a:hover</span> <span class="token punctuation">{</span>   <span class="token comment">/* :hover 是链接伪类选择器 鼠标经过 */</span>
			<span class="token property">color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span> <span class="token comment">/*  鼠标经过的时候，由原来的 灰色 变成了红色 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="块级元素和行内元素区别" tabindex="-1"><a class="header-anchor" href="#块级元素和行内元素区别" aria-hidden="true">#</a> 块级元素和行内元素区别</h3><p>块级元素的特点： （1）总是从新行开始 （2）高度，行高、外边距以及内边距都可以控制。 （3）宽度默认是容器的100% （4）可以容纳内联元素和其他块元素。</p><p>行内元素的特点： （1）和相邻行内元素在一行上。 （2）高、宽无效，但水平方向的padding和margin可以设置，垂直方向的无效。 （3）默认宽度就是它本身内容的宽度。 （4）行内元素只能容纳文本或则其他行内元素。</p><h3 id="行内块元素-inline-block" tabindex="-1"><a class="header-anchor" href="#行内块元素-inline-block" aria-hidden="true">#</a> 行内块元素（inline-block）</h3><p>在行内元素中有几个特殊的标签——<code>&lt;img /&gt;</code>、<code>&lt;input /&gt;</code>、<code>&lt;td&gt;</code>，可以对它们设置宽高和对齐属性，有些资料可能会称它们为行内块元素。</p><p>行内块元素的特点： （1）和相邻行内元素（行内块）在一行上,但是之间会有空白缝隙。 （2）默认宽度就是它本身内容的宽度。 （3）高度，行高、外边距以及内边距都可以控制。</p><h2 id="行高的测量" tabindex="-1"><a class="header-anchor" href="#行高的测量" aria-hidden="true">#</a> 行高的测量</h2><img src="`+c+'"><img src="'+o+'"><p>行高我们利用最多的一个地方是： 可以让一行文本在盒子中垂直居中对齐。</p><p>做法就是： 文字的行高等于盒子的高度。</p><p>这里情况些许复杂，开始学习，我们可以先从简单地方入手学会。</p><img src="'+l+`"><p>上距离和下距离总是相等的，因此文字看上去是垂直居中的。</p><p>如果 行高 等 height 高度 文字会 垂直居中</p><p>如果行高 大于 高度 文字会 偏下</p><p>如果行高小于高度 文字会 偏上</p><p>例子:</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
    <span class="token selector">*</span> <span class="token punctuation">{</span>
        <span class="token property">padding</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
        <span class="token property">margin</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token selector">div</span> <span class="token punctuation">{</span>

        <span class="token property">height</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span>
        <span class="token property">font-size</span><span class="token punctuation">:</span> 16px<span class="token punctuation">;</span>
        <span class="token property">line-height</span><span class="token punctuation">:</span> 0px<span class="token punctuation">;</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> pink<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">/*  为什么当行高变成0的时候，文字会落在上边框一半位置？
    行高:基线和基线的距离
    行间距=行高-字体大小
    行间距=(line-height)-(font-size)
    当字体大小为16px,行高也为16px时,
    行间距=16px-16px=0px,上下两行紧挨

    当字体大小为16px,行高为0px时,
    行间距=0px-16px=-16px,第一行文字是以盒子上边框为第一行的上一行的基线,
    第一行文字的上一行是虚拟的,假如有一行,上边框是这个虚拟行的基线.
    行间距为0,第一行和它的上一行基线0距离,也就是两行文字重叠.从整体看起来,所有行都在向上移动.
    */</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>行高的小例子 how old are you<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
        行高变成0的时候 my english is good<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span> <span class="token punctuation">/&gt;</span></span>
        测试 my english is good<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="css-三大特性" tabindex="-1"><a class="header-anchor" href="#css-三大特性" aria-hidden="true">#</a> CSS 三大特性</h2><p>层叠 继承 优先级 是我们学习CSS 必须掌握的三个特性。</p><h3 id="css层叠性" tabindex="-1"><a class="header-anchor" href="#css层叠性" aria-hidden="true">#</a> CSS层叠性</h3><p>所谓层叠性是指多种CSS样式的叠加。</p><p>是浏览器处理冲突的一个能力,如果一个属性通过两个相同选择器设置到同一个元素上，那么这个时候一个属性就会将另一个属性层叠掉</p><p>比如先给某个标签指定了内部文字颜色为红色，接着又指定了颜色为蓝色，此时出现一个标签指定了相同样式不同值的情况，这就是样式冲突。 就近原则</p><p>一般情况下，如果出现样式冲突，则会按照CSS书写的顺序，以最后的样式为准。</p><ol><li>样式冲突，遵循的原则是就近原则。 那个样式离着结构近，就执行那个样式。</li><li>样式不冲突，不会层叠</li></ol><h3 id="css继承性" tabindex="-1"><a class="header-anchor" href="#css继承性" aria-hidden="true">#</a> CSS继承性</h3><p>所谓继承性是指书写CSS样式表时，子标签会继承父标签的某些样式，如文本颜色和字号。想要设置一个可继承的属性，只需将它应用于父元素即可。</p><p>注意：</p><p>恰当地使用继承可以简化代码，降低CSS样式的复杂性。子元素可以继承父元素的样式（text-，font-，line-这些元素开头的都可以继承，以及color属性）</p><h3 id="css优先级" tabindex="-1"><a class="header-anchor" href="#css优先级" aria-hidden="true">#</a> CSS优先级</h3><p>定义CSS样式时，经常出现两个或更多规则应用在同一元素上，这时就会出现优先级的问题。</p><p>在考虑权重时，初学者还需要注意一些特殊的情况，具体如下：</p><p>继承样式的权重为0。即在嵌套结构中，不管父元素样式的权重多大，被子元素继承时，他的权重都为0，也就是说子元素定义的样式会覆盖继承来的样式。</p><p>行内样式优先。应用style属性的元素，其行内样式的权重非常高，可以理解为远大于100。总之，他拥有比上面提高的选择器都大的优先级。</p><p>权重相同时，CSS遵循就近原则。也就是说靠近元素的样式具有最大的优先级，或者说排在最后的样式优先级最大。</p><p>CSS定义了一个!important命令，该命令被赋予最大的优先级。也就是说不管权重如何以及样式位置的远近，!important都具有最大优先级。</p><h4 id="css特殊性-specificity" tabindex="-1"><a class="header-anchor" href="#css特殊性-specificity" aria-hidden="true">#</a> CSS特殊性（Specificity）</h4><p>关于CSS权重，我们需要一套计算公式来去计算，这个就是 CSS Specificity，我们称为CSS 特性或称非凡性，它是一个衡量CSS值优先级的一个标准 具体规范入如下：</p><p>specificity用一个四位的数 字串(CSS2是三位)来表示，更像四个级别，值从左到右，左面的最大，一级大于一级，数位之间没有进制，级别之间不可超越。</p><table><thead><tr><th>继承或者* 的贡献值</th><th>0,0,0,0</th></tr></thead><tbody><tr><td>每个元素（标签）贡献值为</td><td>0,0,0,1</td></tr><tr><td>每个类，伪类贡献值为</td><td>0,0,1,0</td></tr><tr><td>每个ID贡献值为</td><td>0,1,0,0</td></tr><tr><td>每个行内样式贡献值</td><td>1,0,0,0</td></tr><tr><td>每个!important贡献值 重要的</td><td>∞ 无穷大</td></tr></tbody></table><p>权重是可以叠加的</p><p>比如的例子：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>div ul  li   ------&gt;      0,0,0,3

.nav ul li   ------&gt;      0,0,1,2

a:hover      -----—&gt;      0,0,1,1

.nav a       ------&gt;      0,0,1,1   

#nav p       -----&gt;       0,1,0,1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>​ 注意：</p><p>1.数位之间没有进制 比如说： 0,0,0,5 + 0,0,0,5 =0,0,0,10 而不是 0,0, 1, 0， 所以不会存在10个div能赶上一个类选择器的情况。</p><ol><li>继承的 权重是 0</li></ol><p>总结优先级：</p><ol><li><p>使用了 !important声明的规则。</p></li><li><p>内嵌在 HTML 元素的 style属性里面的声明。</p></li><li><p>使用了 ID 选择器的规则。</p></li><li><p>使用了类选择器、属性选择器、伪元素和伪类选择器的规则。</p></li><li><p>使用了元素选择器的规则。</p></li><li><p>只包含一个通用选择器的规则。</p></li><li><p>同一类选择器则遵循就近原则。</p></li></ol><p>总结：权重是优先级的算法，层叠是优先级的表现</p><h2 id="盒子模型-css重点" tabindex="-1"><a class="header-anchor" href="#盒子模型-css重点" aria-hidden="true">#</a> 盒子模型（CSS重点）</h2><p>CSS三大模块： 盒子模型 、 浮动 、 定位，其余的都是细节。</p><p>所谓盒子模型就是把HTML页面中的元素看作是一个矩形的盒子，也就是一个盛装内容的容器。每个矩形都由元素的内容、内边距（padding）、边框（border）和外边距（margin）组成。</p><h3 id="盒子模型-box-model" tabindex="-1"><a class="header-anchor" href="#盒子模型-box-model" aria-hidden="true">#</a> 盒子模型（Box Model）</h3><p>这里略过 老旧的ie盒子模型（IE6以下）</p><img src="`+d+'" width="700"><p>所有的文档元素（标签）都会生成一个矩形框，我们成为元素框（element box），它描述了一个文档元素再网页布局汇总所占的位置大小。因此，<strong style="color:#f00;">每个盒子除了有自己大小和位置外，还影响着其他盒子的大小和位置。</strong></p><img src="'+r+`" width="700"><h4 id="表格的细线边框" tabindex="-1"><a class="header-anchor" href="#表格的细线边框" aria-hidden="true">#</a> 表格的细线边框</h4><p>以前学过的html表格边框很粗，这里只需要CSS一句话就可以美观起来。</p><p>table{ border-collapse:collapse; } collapse 单词是合并的意思</p><p>border-collapse:collapse; 表示相邻边框合并在一起。</p><h4 id="外边距实现盒子水平居中" tabindex="-1"><a class="header-anchor" href="#外边距实现盒子水平居中" aria-hidden="true">#</a> 外边距实现盒子水平居中</h4><p>可以让一个盒子实现水平居中，需要满足以下两个条件：</p><ol><li>必须是块级元素。</li><li>盒子必须指定了宽度（width）</li></ol><p>然后就给<strong>左右的外边距都设置为auto</strong>，就可使块级元素水平居中。</p><p>实际工作中常用这种方式进行网页布局，示例代码如下：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.header</span><span class="token punctuation">{</span> <span class="token property">width</span><span class="token punctuation">:</span>960px<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span>0 auto<span class="token punctuation">;</span><span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="图片和背景区别" tabindex="-1"><a class="header-anchor" href="#图片和背景区别" aria-hidden="true">#</a> 图片和背景区别</h4><ol><li>插入图片 我们用的最多 比如产品展示类</li><li>背景图片我们一般用于小图标背景 或者 超大背景图片</li></ol><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">section img</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 200px<span class="token punctuation">;</span><span class="token comment">/* 插入图片更改大小 width 和 height */</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 210px<span class="token punctuation">;</span>
    <span class="token property">margin-top</span><span class="token punctuation">:</span> 30px<span class="token punctuation">;</span>  <span class="token comment">/* 插入图片更改位置 可以用margin 或padding  盒模型 */</span>
    <span class="token property">margin-left</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span> <span class="token comment">/* 插入当图片也是一个盒子 */</span>
<span class="token punctuation">}</span>

<span class="token selector">aside</span> <span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> 1px solid purple<span class="token punctuation">;</span>
    <span class="token property">background</span><span class="token punctuation">:</span> #fff <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span>images/sun.jpg<span class="token punctuation">)</span></span> no-repeat<span class="token punctuation">;</span>

    <span class="token property">background-size</span><span class="token punctuation">:</span> 200px 210px<span class="token punctuation">;</span> <span class="token comment">/*  背景图片更改大小只能用 background-size */</span>
    <span class="token property">background-position</span><span class="token punctuation">:</span> 30px 50px<span class="token punctuation">;</span> <span class="token comment">/* 背景图片更该位置 我用 background-position */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="清除元素的默认内外边距" tabindex="-1"><a class="header-anchor" href="#清除元素的默认内外边距" aria-hidden="true">#</a> 清除元素的默认内外边距</h4><p>为了更方便地控制网页中的元素，制作网页时，可使用如下代码清除元素的默认内外边距：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">*</span> <span class="token punctuation">{</span>
   <span class="token property">padding</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>         <span class="token comment">/* 清除内边距 */</span>
   <span class="token property">margin</span><span class="token punctuation">:</span>0<span class="token punctuation">;</span>          <span class="token comment">/* 清除外边距 */</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意： 行内元素是只有左右外边距的，是没有上下外边距的。 内边距，在ie6等低版本浏览器也会有问题。</p><p>我们尽量不要给行内元素指定上下的内外边距就好了。</p><h2 id="外边距合并" tabindex="-1"><a class="header-anchor" href="#外边距合并" aria-hidden="true">#</a> 外边距合并</h2><p>使用margin定义块元素的垂直外边距时，可能会出现外边距的合并。</p><h3 id="相邻块元素垂直外边距的合并" tabindex="-1"><a class="header-anchor" href="#相邻块元素垂直外边距的合并" aria-hidden="true">#</a> 相邻块元素垂直外边距的合并</h3><p>当上下相邻的两个块元素相遇时，如果上面的元素有下外边距margin-bottom，下面的元素有上外边距margin-top，则他们之间的垂直间距不是margin-bottom与margin-top之和，而是两者中的较大者。这种现象被称为相邻块元素垂直外边距的合并（也称外边距塌陷）。</p><p>解决方案： 避免就好了。</p><h3 id="嵌套块元素垂直外边距的合并" tabindex="-1"><a class="header-anchor" href="#嵌套块元素垂直外边距的合并" aria-hidden="true">#</a> 嵌套块元素垂直外边距的合并</h3><p>对于两个嵌套关系的块元素，如果父元素没有上内边距及边框，则父元素的上外边距会与子元素的上外边距发生合并，合并后的外边距为两者中的较大者，即使父元素的上外边距为0，也会发生合并。</p><img src="`+u+`"><p>解决方案：</p><ol><li>可以为父元素定义1像素的上边框或上内边距。</li><li>可以为父元素添加overflow:hidden。</li></ol><h3 id="content宽度和高度" tabindex="-1"><a class="header-anchor" href="#content宽度和高度" aria-hidden="true">#</a> content宽度和高度</h3><p>使用宽度属性width和高度属性height可以对盒子的大小进行控制。</p><p>width和height的属性值可以为不同单位的数值或相对于父元素的百分比%，实际工作中最常用的是像素值。</p><p>大多数浏览器，如Firefox、IE6及以上版本都采用了W3C规范，符合CSS规范的盒子模型的总宽度和总高度的计算原则是：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>/*外盒尺寸计算（元素空间尺寸）*/
Element空间高度 = content height + padding + border + margin
Element 空间宽度 = content width + padding + border + margin
/*内盒尺寸计算（元素实际大小）*/
Element Height = content height + padding + border （Height为内容高度）
Element Width = content width + padding + border （Width为内容宽度）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>注意：</p><p>1、宽度属性width和高度属性height仅适用于块级元素，对行内元素无效（ img 标签和 input除外）。</p><p>2、计算盒子模型的总高度时，还应考虑上下两个盒子垂直外边距合并的情况。</p><p>3、<strong>如果一个盒子会和父亲一样宽 占满父亲的宽度， 如果此盒子没有给定宽度 则padding 不会影响本盒子大小</strong>。</p><h2 id="清除浮动" tabindex="-1"><a class="header-anchor" href="#清除浮动" aria-hidden="true">#</a> 清除浮动</h2><h3 id="为什么要清除浮动" tabindex="-1"><a class="header-anchor" href="#为什么要清除浮动" aria-hidden="true">#</a> 为什么要清除浮动</h3><p>我们前面说过，浮动本质是用来做一些文字混排效果的，但是被我们拿来做布局用，则会有很多的问题出现， 但是，你不能说浮动不好</p><p>由于浮动元素不再占用原文档流的位置，所以它会对后面的元素排版产生影响，为了解决这些问题，此时就需要在该元素中清除浮动。</p><p>准确地说，并不是清除浮动，而是<strong>清除浮动后造成的影响</strong></p><h3 id="清除浮动本质" tabindex="-1"><a class="header-anchor" href="#清除浮动本质" aria-hidden="true">#</a> 清除浮动本质</h3><p>清除浮动主要为了解决父级元素因为子级浮动引起内部高度为0 的问题。</p><img src="`+h+'"><img src="'+k+`"><h3 id="清除浮动的方法" tabindex="-1"><a class="header-anchor" href="#清除浮动的方法" aria-hidden="true">#</a> 清除浮动的方法</h3><p>其实本质叫做闭合浮动更好一些, 记住，清除浮动就是把浮动的盒子圈到里面，让父盒子闭合出口和入口不让他们出来影响其他元素。</p><p>在CSS中，clear属性用于清除浮动，其基本语法格式如下：</p><p><code>选择器{clear:both;}</code></p><table><thead><tr><th>属性值</th><th>描述</th></tr></thead><tbody><tr><td>left</td><td>不允许左侧有浮动元素（清除左侧浮动的影响）</td></tr><tr><td>right</td><td>不允许右侧有浮动元素（清除右侧浮动的影响）</td></tr><tr><td>both</td><td>同时清除左右两侧浮动的影响</td></tr></tbody></table><h4 id="额外标签法" tabindex="-1"><a class="header-anchor" href="#额外标签法" aria-hidden="true">#</a> 额外标签法</h4><p>额外标签法是W3C推荐的做法是通过在浮动元素末尾添加一个空的标签</p><p>例如</p><p><code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code>，或者其他标签br等亦可。</p><p>优点： 通俗易懂，书写方便</p><p>缺点： 添加许多无意义的标签，结构化较差。</p><h4 id="父级添加overflow属性方法" tabindex="-1"><a class="header-anchor" href="#父级添加overflow属性方法" aria-hidden="true">#</a> 父级添加overflow属性方法</h4><p>可以通过触发BFC的方式，可以实现清除浮动效果。</p><p>可以给父级添加： <code>overflow为 hidden|auto|scroll</code> 都可以实现。</p><p>优点： 代码简洁</p><p>缺点： 内容增多时候容易造成不会自动换行导致内容被隐藏掉，无法显示需要溢出的元素。</p><h4 id="使用after伪元素清除浮动" tabindex="-1"><a class="header-anchor" href="#使用after伪元素清除浮动" aria-hidden="true">#</a> 使用after伪元素清除浮动</h4><p><strong>:after 方式为额外标签法的升级版，好处是不用单独加标签了</strong></p><p>使用方法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>  <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span> <span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">height</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span> <span class="token property">clear</span><span class="token punctuation">:</span> both<span class="token punctuation">;</span> <span class="token property">visibility</span><span class="token punctuation">:</span> hidden<span class="token punctuation">;</span>  <span class="token punctuation">}</span>   

<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>*<span class="token property">zoom</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token comment">/* IE6、7 专有 */</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>优点： 符合闭合浮动思想 结构语义化正确</p><p>缺点： 由于IE6-7不支持:after，使用 zoom:1触发 hasLayout。</p><p>代表网站： 百度、淘宝网、网易等</p><img src="`+v+`"><p>注意： content:&quot;&quot; 尽量不带点</p><h4 id="使用before和after双伪元素清除浮动" tabindex="-1"><a class="header-anchor" href="#使用before和after双伪元素清除浮动" aria-hidden="true">#</a> 使用before和after双伪元素清除浮动</h4><p>使用方法：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">.clearfix:before,.clearfix:after</span> <span class="token punctuation">{</span> 
    <span class="token property">content</span><span class="token punctuation">:</span><span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
    <span class="token property">display</span><span class="token punctuation">:</span>table<span class="token punctuation">;</span>  <span class="token comment">/* 这句话可以出发BFC BFC可以清除浮动,BFC我们后面讲 */</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix:after</span> <span class="token punctuation">{</span>
    <span class="token property">clear</span><span class="token punctuation">:</span>both<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector">.clearfix</span> <span class="token punctuation">{</span>
    *<span class="token property">zoom</span><span class="token punctuation">:</span>1<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="定位-position" tabindex="-1"><a class="header-anchor" href="#定位-position" aria-hidden="true">#</a> 定位(position)</h2><p>background-position 背景定位</p><h3 id="元素的定位属性" tabindex="-1"><a class="header-anchor" href="#元素的定位属性" aria-hidden="true">#</a> 元素的定位属性</h3><p>元素的定位属性主要包括定位模式和边偏移两部分。</p><p>1、边偏移</p><table><thead><tr><th>边偏移属性</th><th>描述</th></tr></thead><tbody><tr><td>top</td><td>顶端偏移量，定义元素相对于其父元素上边线的距离</td></tr><tr><td>bottom</td><td>底部偏移量，定义元素相对于其父元素下边线的距离</td></tr><tr><td>left</td><td>左侧偏移量，定义元素相对于其父元素左边线的距离</td></tr><tr><td>right</td><td>右侧偏移量，定义元素相对于其父元素右边线的距离</td></tr></tbody></table><p>2、定位模式(定位的分类)</p><p>在CSS中，position属性用于定义元素的定位模式，其基本语法格式如下：</p><p><code>选择器{position:属性值;}</code></p><p>position属性的常用值</p><table><thead><tr><th>值</th><th>描述</th></tr></thead><tbody><tr><td>static</td><td>自动定位（默认定位方式）</td></tr><tr><td>relative</td><td>相对定位，相对于其原文档流的位置进行定位</td></tr><tr><td>absolute</td><td>绝对定位，相对于其上一个已经定位的父元素进行定位</td></tr><tr><td>fixed</td><td>固定定位，相对于浏览器窗口进行定位</td></tr></tbody></table><h4 id="去除图片底侧空白缝隙" tabindex="-1"><a class="header-anchor" href="#去除图片底侧空白缝隙" aria-hidden="true">#</a> 去除图片底侧空白缝隙</h4><p>有个很重要特性你要记住： 图片或者表单等行内块元素，他的底线会和父级盒子的基线对齐。这样会造成一个问题，就是图片底侧会有一个空白缝隙。</p><p>解决的方法就是：</p><ol><li>给img vertical-align:middle | top等等。 让图片不要和基线对齐。</li><li><img src="`+m+'"></li><li>给img 添加 display：block; 转换为块级元素就不会存在问题了。</li></ol><h2 id="web字体" tabindex="-1"><a class="header-anchor" href="#web字体" aria-hidden="true">#</a> web字体</h2><h3 id="字体格式" tabindex="-1"><a class="header-anchor" href="#字体格式" aria-hidden="true">#</a> 字体格式</h3><p>不同浏览器所支持的字体格式是不一样的，我们有必要了解一下有关字体格式的知识。</p><p>1、TureType(.ttf)格式</p><p>.ttf字体是Windows和Mac的最常见的字体，是一种RAW格式，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome4+、Safari3+、Opera10+、iOS Mobile、Safari4.2+；</p><p>2、OpenType(.otf)格式</p><p>.otf字体被认为是一种原始的字体格式，其内置在TureType的基础上，支持这种字体的浏览器有Firefox3.5+、Chrome4.0+、Safari3.1+、Opera10.0+、iOS Mobile、Safari4.2+；</p><p>3、Web Open Font Format(.woff)格式</p><p>woff字体是Web字体中最佳格式，他是一个开放的TrueType/OpenType的压缩版本，同时也支持元数据包的分离，支持这种字体的浏览器有IE9+、Firefox3.5+、Chrome6+、Safari3.6+、Opera11.1+；</p><p>4、Embedded Open Type(.eot)格式</p><p>.eot字体是IE专用字体，可以从TrueType创建此格式字体，支持这种字体的浏览器有IE4+；</p><p>5、SVG(.svg)格式</p><p>.svg字体是基于SVG字体渲染的一种格式，支持这种字体的浏览器有Chrome4+、Safari3.1+、Opera10.0+、iOS Mobile Safari3.2+；</p><p>了解了上面的知识后，我们就需要为不同的浏览器准备不同格式的字体，通常我们会通过字体生成工具帮我们生成各种格式的字体，因此无需过于在意字体格式间的区别差异。</p><h2 id="字体图标" tabindex="-1"><a class="header-anchor" href="#字体图标" aria-hidden="true">#</a> 字体图标</h2><p>图片是有诸多优点的，但是缺点很明显，比如图片不但增加了总文件的大小，还增加了很多额外的&quot;http请求&quot;，这都会大大降低网页的性能的。更重要的是图片不能很好的进行“缩放”，因为图片放大和缩小会失真。 我们后面会学习移动端响应式，很多情况下希望我们的图标是可以缩放的。此时，一个非常重要的技术出现了，额不是出现了，是以前就有，是被重新&quot;宠幸&quot; 这就是字体图标（iconfont).</p><h3 id="字体图标优点" tabindex="-1"><a class="header-anchor" href="#字体图标优点" aria-hidden="true">#</a> 字体图标优点</h3><p>可以做出跟图片一样可以做的事情,改变透明度、旋转度等 但是本质其实是文字，可以很随意的改变颜色、产生阴影、透明效果等等... 本身体积更小，但携带的信息并没有削减。 几乎支持所有的浏览器 移动端设备必备良药...</p><h3 id="字体图标使用流程" tabindex="-1"><a class="header-anchor" href="#字体图标使用流程" aria-hidden="true">#</a> 字体图标使用流程</h3><p>总体来说，字体图标按照如下流程：</p><img src="'+g+'"><h4 id="设计字体图标" tabindex="-1"><a class="header-anchor" href="#设计字体图标" aria-hidden="true">#</a> 设计字体图标</h4><p>假如图标是我们公司单独设计，那就需要第一步了，这个属于UI设计人员的工作， 他们在 illustrator 或 Sketch 这类矢量图形软件里创建 icon图标， 比如下图：</p><img src="'+b+'"><p>之后保存为svg格式，然后给我们前端人员就好了。</p><p>其实第一步，我们不需要关心，只需要给我们这些图标就可以了，如果图标是大众的，网上本来就有的，可以直接跳过第一步，进入第三步。</p><h4 id="上传生成字体包" tabindex="-1"><a class="header-anchor" href="#上传生成字体包" aria-hidden="true">#</a> 上传生成字体包</h4><p>当UI设计人员给我们svg文件的时候，我们需要转换成我们页面能使用的字体文件， 而且需要生成的是兼容性的适合各个浏览器的。</p><p>​ 推荐网站： http://icomoon.io</p><p><strong>icomoon字库</strong></p><p>IcoMoon成立于2011年，推出的第一个自定义图标字体生成器，它允许用户选择他们所需要的图标，使它们成一字型。 内容种类繁多，非常全面，唯一的遗憾是国外服务器，打开网速较慢。</p><p>推荐网站： http://www.iconfont.cn/</p><p><strong>阿里icon font字库</strong></p><p>http://www.iconfont.cn/</p><p>这个是阿里妈妈M2UX的一个icon font字体图标字库，包含了淘宝图标库和阿里妈妈图标库。可以使用AI制作图标上传生成。 一个字，免费，免费！！</p><h4 id="字体引入到html" tabindex="-1"><a class="header-anchor" href="#字体引入到html" aria-hidden="true">#</a> 字体引入到HTML</h4><p>得到压缩包之后，最后一步，是最重要的一步了， 就是字体文件已经有了，我们需要引入到我们页面中。</p><ol><li><p>首先把 以下4个文件放入到 fonts文件夹里面。 通俗的做法</p><p><img src="'+f+`" alt="1498032122244"></p><h5 id="第一步-在样式里面声明字体-告诉别人我们自己定义的字体" tabindex="-1"><a class="header-anchor" href="#第一步-在样式里面声明字体-告诉别人我们自己定义的字体" aria-hidden="true">#</a> 第一步：在样式里面声明字体： 告诉别人我们自己定义的字体</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@font-face</span></span> <span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&#39;icomoon&#39;</span><span class="token punctuation">;</span>
    <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;fonts/icomoon.eot?7kkyc2&#39;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span>
    <span class="token property">src</span><span class="token punctuation">:</span>  <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;fonts/icomoon.eot?7kkyc2#iefix&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;embedded-opentype&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;fonts/icomoon.ttf?7kkyc2&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;truetype&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;fonts/icomoon.woff?7kkyc2&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;woff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&#39;fonts/icomoon.svg?7kkyc2#icomoon&#39;</span><span class="token punctuation">)</span></span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token string">&#39;svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">font-weight</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
    <span class="token property">font-style</span><span class="token punctuation">:</span> normal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="第二步-给盒子使用字体" tabindex="-1"><a class="header-anchor" href="#第二步-给盒子使用字体" aria-hidden="true">#</a> 第二步：给盒子使用字体</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">span</span> <span class="token punctuation">{</span>
    <span class="token property">font-family</span><span class="token punctuation">:</span> <span class="token string">&quot;icomoon&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h5 id="第三步-盒子里面添加结构" tabindex="-1"><a class="header-anchor" href="#第三步-盒子里面添加结构" aria-hidden="true">#</a> 第三步：盒子里面添加结构</h5><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token selector">span::before</span> <span class="token punctuation">{</span>
    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">&quot;\\e900&quot;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
或者  
&lt;span&gt;&lt;/span&gt;  
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="追加新图标到原来库里面" tabindex="-1"><a class="header-anchor" href="#追加新图标到原来库里面" aria-hidden="true">#</a> 追加新图标到原来库里面</h3><p>如果工作中，原来的字体图标不够用了，我们需要添加新的字体图标，但是原来的不能删除，继续使用，此时我们需要这样做</p><p>把压缩包里面的selection.json 从新上传，然后，选中自己想要新的图标，从新下载压缩包，替换原来文件即可。</p><img src="`+x+'"></li></ol><h2 id="bfc-块级格式化上下文" tabindex="-1"><a class="header-anchor" href="#bfc-块级格式化上下文" aria-hidden="true">#</a> BFC(块级格式化上下文)</h2><p>BFC(Block formatting context)</p><p>直译为&quot;块级格式化上下文&quot;。</p><h3 id="那些元素会具有bfc的条件" tabindex="-1"><a class="header-anchor" href="#那些元素会具有bfc的条件" aria-hidden="true">#</a> 那些元素会具有BFC的条件</h3><p>不是所有的元素模式都能产生BFC，w3c 规范：</p><p>display 属性为 block, list-item, table 的元素，会产生BFC.</p><p>大家有么有发现这个三个都是用来布局最为合理的元素，因为他们就是用来可视化布局。</p><p>注意其他的，display属性，比如 line 等等，他们创建的是 IFC ，我们暂且不研究。</p><p>这个BFC 有着具体的布局特性：</p><img src="'+y+`"><p>有宽度和高度 ， 有 外边距margin 有内边距padding 有边框 border。</p><h3 id="什么情况下可以让元素产生bfc" tabindex="-1"><a class="header-anchor" href="#什么情况下可以让元素产生bfc" aria-hidden="true">#</a> 什么情况下可以让元素产生BFC</h3><p>以上盒子具有BFC条件了，就是说有资质了，但是怎样触发才会产生BFC，从而创造这个封闭的环境呢？</p><p>在好比，你光有资质还不行，你需要一定额外效果才能出发的武学潜力，要么你掉到悬崖下面，捡到了一本九阴真经，要么你学习葵花宝典，欲练此功必先....</p><p>同样，要给这些元素添加如下属性就可以触发BFC。</p><p>-float属性不为none</p><p>-position为absolute或fixed</p><p>-display为inline-block, table-cell, table-caption, flex, inline-flex</p><p>-overflow不为visible。</p><h3 id="bfc元素所具有的特性" tabindex="-1"><a class="header-anchor" href="#bfc元素所具有的特性" aria-hidden="true">#</a> BFC元素所具有的特性</h3><p>BFC布局规则特性：</p><p>1.在BFC中，盒子从顶端开始垂直地一个接一个地排列.</p><p>2.盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠</p><p>3.在BFC中，每一个盒子的左外边缘（margin-left）会触碰到容器的左边缘(border-left)（对于从右到左的格式来说，则触碰到右边缘）。</p><ol><li>BFC的区域不会与浮动盒子产生交集，而是紧贴浮动边缘。</li><li>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。</li></ol><p>它是一个独立的渲染区域，只有Block-level box参与， 它规定了内部的Block-level Box如何布局，并且与这个区域外部毫不相干。</p><p>白话文： 孩子在家里愿意怎么折腾都行，但是出了家门口，你就的乖乖的，不能影响外面的任何人。</p><h3 id="bfc的主要用途" tabindex="-1"><a class="header-anchor" href="#bfc的主要用途" aria-hidden="true">#</a> BFC的主要用途</h3><p>BFC能用来做什么？</p><p>(1) 清除元素内部浮动</p><p>只要把父元素设为BFC就可以清理子元素的浮动了，最常见的用法就是在父元素上设置overflow: hidden样式，对于IE6加上zoom:1就可以了。</p><p>主要用到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>计算BFC的高度时，自然也会检测浮动或者定位的盒子高度。

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><img src="`+S+'">',291),B=n(`<p>外边距合并的问题。</p><p>主要用到</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>盒子垂直方向的距离由margin决定。属于同一个BFC的两个相邻盒子的margin会发生重叠

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>属于同一个BFC的两个相邻盒子的margin会发生重叠，那么我们创建不属于同一个BFC，就不会发生margin重叠了。</p><img src="`+C+'"><p>(3) 制作右侧自适应的盒子问题</p><p>主要用到</p><p>普通流体元素BFC后，为了和浮动元素不产生任何交集，顺着浮动边缘形成自己的封闭上下文</p><h3 id="bfc-总结" tabindex="-1"><a class="header-anchor" href="#bfc-总结" aria-hidden="true">#</a> BFC 总结</h3><p>BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素。反之也如此。包括浮动，和外边距合并等等，因此，有了这个特性，我们布局的时候就不会出现意外情况了。</p><h2 id="css盒子模型" tabindex="-1"><a class="header-anchor" href="#css盒子模型" aria-hidden="true">#</a> css盒子模型</h2><p>css盒子模型又称框模型(Box Model), 包含了元素内容(content), 内边距(padding), 边框(border), 外边距(margin)几个要素.</p><p><img src="'+q+`" alt="1555296613463"></p><h2 id="import和link引入样式的区别" tabindex="-1"><a class="header-anchor" href="#import和link引入样式的区别" aria-hidden="true">#</a> @import和link引入样式的区别</h2><ol><li>从属关系区别</li></ol><p><code>@import</code>是 CSS 提供的语法规则，只有导入样式表的作用；<code>link</code>是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。</p><ol start="2"><li>加载顺序区别</li></ol><p>加载页面时，<code>link</code>标签引入的 CSS 被同时加载；<code>@import</code>引入的 CSS 将在页面加载完毕后被加载。</p><ol start="3"><li>兼容性区别</li></ol><p><code>@import</code>是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；<code>link</code>标签作为 HTML 元素，不存在兼容性问题。</p><ol start="4"><li>DOM可控性区别</li></ol><p>可以通过 JS 操作 DOM ，插入<code>link</code>标签来改变样式；由于DOM方法是基于文档的，无法使用<code>@import</code>的方式插入样式。</p><p>引入：</p><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code><span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;green.css&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
<span class="token selector">div</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> blue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
        <span class="token atrule"><span class="token rule">@import</span> <span class="token url"><span class="token function">url</span><span class="token punctuation">(</span><span class="token string url">&quot;./green.css&quot;</span><span class="token punctuation">)</span></span><span class="token punctuation">;</span></span>
    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>stylesheet<span class="token punctuation">&quot;</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./blue.css<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span><span class="token value css language-css"><span class="token property">width</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span><span class="token property">height</span><span class="token punctuation">:</span>50px<span class="token punctuation">;</span></span><span class="token punctuation">&quot;</span></span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>虽然@import会在页面执行结束后加载，但是如果写在普通样式之前，还是会被后面的覆盖，并不是说最后加载会把其他渲染好的样式覆盖掉。</p><p>实际上，浏览器渲染的动作一般会执行多次的。最后一次渲染，一定是基于之前加载过的所有样式整合后渲染树进行绘制页面的，已经被渲染过的页面元素，也会被重新渲染。</p><p>那么我们就可以把@import这种导入 CSS 文件的方式理解成一种替换，CSS 解析引擎在对一个 CSS 文件进行解析时，如在文件顶部遇到@import，将被替换为该@import导入的 CSS 文件中的全部样式。</p><p>@import引入的样式会被层叠掉。其虽然后被加载，却会在加载完毕后置于样式表顶部，最终渲染时自然会被下面的同名样式层叠。</p>`,29);function w(E,M){return s(),t("div",null,[F,e(" (2) 解决外边距合并问题 "),B])}const L=a(_,[["render",w],["__file","index.html.vue"]]);export{L as default};
