import{_ as i,n as o,p as d,q as p,s as n,R as a,t,Z as s}from"./framework-fdd38eac.js";const l="/assets/1550471350764-cbfac4c3.png",r="/assets/1550451105849-0cdbbe01.png",c="/assets/1550451869425-d9880427.png",u="/assets/1566631866656-c559c030.png",h="/assets/mongostat-7bb02a26.jpg",v="/assets/1550473345988-13109898.png",b="/assets/1550473096293-56bf7d0f.png",m="/assets/1550472964865-f03ee330.png",g="/assets/1550473169233-4ebc2790.png",k="/assets/1550473244117-1d16a9c5.png",x="/assets/1550473420954-4dc3584c.png",f="/assets/1550458133626-d927357d.png",_="/assets/1550456840546-8f436c11.png",y="/assets/1550463512370-dc0e0874.png",q="/assets/1566628733305-9faf21cf.png",j={},w=s('<h1 id="mongodb" tabindex="-1"><a class="header-anchor" href="#mongodb" aria-hidden="true">#</a> MongoDB</h1><h2 id="_1-mongodb介绍" tabindex="-1"><a class="header-anchor" href="#_1-mongodb介绍" aria-hidden="true">#</a> 1.MongoDB介绍</h2><ul><li>MongoDB是一个基于分布式文件存储的开源数据库系统</li><li>MongoDB 将数据存储为一个文档，数据结构由键值(key=&gt;value)对组成。MongoDB 文档类似于 JSON 对象。字段值可以包含其他文档，数组及文档数组。</li></ul><p>Mongo数据库的优点</p><ul><li><p>高可扩展性</p></li><li><p>分布式存储</p></li><li><p>低成本</p></li><li><p>结构灵活</p></li></ul><p>数据库对比</p><p><img src="'+l+'" alt="1550471350764"></p><h2 id="_2-mongodb的安装和环境搭建" tabindex="-1"><a class="header-anchor" href="#_2-mongodb的安装和环境搭建" aria-hidden="true">#</a> 2.MongoDB的安装和环境搭建</h2><h3 id="_2-1windows安装" tabindex="-1"><a class="header-anchor" href="#_2-1windows安装" aria-hidden="true">#</a> 2.1windows安装</h3>',9),$={href:"https://www.mongodb.org/downloads",target:"_blank",rel:"noopener noreferrer"},z=s('<p>安装</p><p>下载安装包或者压缩包</p><p>添加db存储和日志存储文件夹</p><p>添加服务, 配置环境变量, 启动Mongo</p><p><img src="'+r+`" alt="1550451105849"></p><blockquote><p>或者可以把配置文件写好了之后再通过命令配置</p></blockquote><blockquote><p>etc文件夹下的mongo.conf文件</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>#数据库路径
dbpath=c:\\MongoDB\\data\\
#日志输出文件路径
logpath=c:\\MongoDB\\logs\\mongodb.log
#错误日志采用追加模式，配置这个选项后mongodb的日志会追加到现有的日志文件，而不是从新创建一个新文件
logappend=true
#启用日志文件，默认启用
journal=true
#这个选项可以过滤掉一些无用的日志信息，若需要调试使用请设置为false
quiet=false
#端口号 默认为27017
port=27017
#http配置
httpinterface=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+c+'" alt="1550451869425"></p><h3 id="_2-2mac安装" tabindex="-1"><a class="header-anchor" href="#_2-2mac安装" aria-hidden="true">#</a> 2.2mac安装</h3>',10),D={href:"https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/",target:"_blank",rel:"noopener noreferrer"},M=s(`<li><p>先安装homebrew</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>http://brew.sh/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li><li><p>使用brew安装mongodb</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>brew install mongodb
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div></li>`,2),B={href:"https://robomongo.org/",target:"_blank",rel:"noopener noreferrer"},A=s('<h2 id="_3-mongodb启动与连接" tabindex="-1"><a class="header-anchor" href="#_3-mongodb启动与连接" aria-hidden="true">#</a> 3.mongodb启动与连接</h2><h3 id="_3-1windows启动服务器端" tabindex="-1"><a class="header-anchor" href="#_3-1windows启动服务器端" aria-hidden="true">#</a> 3.1windows启动服务器端</h3><ol><li>找到mongodb安装目录，一般是<code>D:\\Development Tools\\MongoDB\\bin</code></li><li>按下shift+鼠标右键，选择在此处打开命令窗口</li><li>在除C盘外的盘符新建一个空目录，如：<code>D:\\Mongodb\\data</code>，就是新建一个空文件夹</li><li>在命令行中输入<code>mongod --dbpath=&#39;[刚创建的空目录]&#39;</code>，如<code>mongod --dbpath=D:\\Mongodb\\data</code></li><li>再按回车键</li></ol><p><img src="'+u+'" alt="1566631866656"></p><ul><li>如果出现<code>waiting for connections on port 27017</code>就表示<strong>启动成功</strong>,已经在27017端口上监听了客户端的请求</li><li>注意：<code>--dbpath</code>后的值表示数据库文件的存储路径,而且后面的路径必须事先创建好，必须已经<strong>存在</strong>，否则服务开启失败</li><li>注意：这个命令窗体绝对<strong>不能关</strong>,关闭这个窗口就相当于停止了<code>mongodb</code>服务</li></ul><h2 id="_4-mongodb基本概念" tabindex="-1"><a class="header-anchor" href="#_4-mongodb基本概念" aria-hidden="true">#</a> 4.MongoDB基本概念</h2><ul><li><strong>数据库</strong> MongoDB的单个实例可以容纳<strong>多个</strong>独立的数据库，比如一个学生管理系统就可以对应一个数据库实例</li><li><strong>集合</strong> 数据库是由集合组成的,一个集合用来表示一个<strong>实体</strong>,如学生集合</li><li><strong>文档</strong> 集合是由文档组成的，一个文档表示一条<strong>记录</strong>,比如一位同学张三就是一个文档</li></ul><p><img src="'+h+`" alt=""></p><h2 id="_5-数据库操作" tabindex="-1"><a class="header-anchor" href="#_5-数据库操作" aria-hidden="true">#</a> 5.数据库操作</h2><h3 id="_5-1使用数据库" tabindex="-1"><a class="header-anchor" href="#_5-1使用数据库" aria-hidden="true">#</a> 5.1使用数据库</h3><p>语法：<code>use [database_name]</code></p><ul><li>database_name代表数据库的名字</li><li>注：如果此数据库存在，则切换到此数据库下，如果此数据库还不存在也可以切过来，但是并不能立刻创建数据库</li></ul><p>切换到<code>school</code>数据库下：<code>use school</code></p><h3 id="_5-2查看所有数据库" tabindex="-1"><a class="header-anchor" href="#_5-2查看所有数据库" aria-hidden="true">#</a> 5.2查看所有数据库</h3><p>语法：<code>show dbs</code></p><ul><li>我们刚创建的数据库<code>school</code>如果不在列表内，要显示它，我们需要向<code>school</code>数据库插入一些数据：<code>db.students.insert({name:&#39;zfpx&#39;,age:1})</code></li></ul><h3 id="_5-3查看所有数据库" tabindex="-1"><a class="header-anchor" href="#_5-3查看所有数据库" aria-hidden="true">#</a> 5.3查看所有数据库</h3><p>语法：<code>db</code></p><ul><li>db代表的是当前的数据库，也就是school这个数据库</li></ul><h3 id="_5-4删除数据库" tabindex="-1"><a class="header-anchor" href="#_5-4删除数据库" aria-hidden="true">#</a> 5.4删除数据库</h3><p>语法：<code>db.dropDatabase()</code></p><h2 id="_6-集合操作" tabindex="-1"><a class="header-anchor" href="#_6-集合操作" aria-hidden="true">#</a> 6.集合操作</h2><h3 id="_6-1查看集合帮助" tabindex="-1"><a class="header-anchor" href="#_6-1查看集合帮助" aria-hidden="true">#</a> 6.1查看集合帮助</h3><p>语法：<code>db.students.help()</code></p><h3 id="_6-2查看数据库下的集合" tabindex="-1"><a class="header-anchor" href="#_6-2查看数据库下的集合" aria-hidden="true">#</a> 6.2查看数据库下的集合</h3><p>语法：<code>show collections</code></p><h3 id="_6-3创建集合" tabindex="-1"><a class="header-anchor" href="#_6-3创建集合" aria-hidden="true">#</a> 6.3创建集合</h3><h4 id="_6-3-1创建一个空集合" tabindex="-1"><a class="header-anchor" href="#_6-3-1创建一个空集合" aria-hidden="true">#</a> 6.3.1创建一个空集合</h4><p>语法：<code>db.createCollection(collection_name)</code></p><ul><li>collection_name集合的名称</li></ul><h4 id="_6-3-2创建集合并插入一个文档" tabindex="-1"><a class="header-anchor" href="#_6-3-2创建集合并插入一个文档" aria-hidden="true">#</a> 6.3.2创建集合并插入一个文档</h4><p>语法：<code>db.collection_Name.insert(document_name)</code></p><ul><li>document_name要插入的文档</li></ul><h2 id="_7-插入文档" tabindex="-1"><a class="header-anchor" href="#_7-插入文档" aria-hidden="true">#</a> 7.插入文档</h2><h3 id="_7-1insert" tabindex="-1"><a class="header-anchor" href="#_7-1insert" aria-hidden="true">#</a> 7.1insert</h3><p>语法：<code>db.collection_name.insert(document)</code></p><ul><li>collection_name集合的名字</li><li>document插入的文档</li></ul><blockquote><p>每当插入一条新文档的时候mongodb会自动为此文档生成一个<code>_id</code>属性，<code>_id</code>一定是唯一的，用来唯一标识一个文档，<code>_id</code>也可以直接指定，但如果数据库中此集合下已经有此<code>_id</code>的话插入会失败</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.students.insert({_id:1,name:&#39;zfpx&#39;,age:1});
WriteResult({&quot;nInserted&quot;: 1})
db.students.insert({_id:1,name:&#39;zfpx&#39;,age:1})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_7-2save" tabindex="-1"><a class="header-anchor" href="#_7-2save" aria-hidden="true">#</a> 7.2save</h3><p>语法：<code>db.collection_name.save(document)</code></p><ul><li>collection_name集合的名字</li><li>document插入的文档</li></ul><blockquote><p>注：如果不指定<code>_id</code>字段save()方法类似于insert()方法。如果指定<code>_id</code>字段，则会更新该<code>_id</code>的数据</p></blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.students.save({_id:1,name:&#39;zfpx&#39;,age:1});
WriteResult({ &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 0 })
db.students.save({_id:1,name:&#39;zfpx&#39;,age:100})
WriteResult({ &quot;nMatched&quot; : 1, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 1 })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_8-更新文档" tabindex="-1"><a class="header-anchor" href="#_8-更新文档" aria-hidden="true">#</a> 8.更新文档</h2><h3 id="_8-1语法" tabindex="-1"><a class="header-anchor" href="#_8-1语法" aria-hidden="true">#</a> 8.1语法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.collection.update(
	&lt;query&gt;,
	&lt;updateObj&gt;,
	{
        upsert:&lt;boolean&gt;,
        multi:&lt;boolean&gt;
	}
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-2参数" tabindex="-1"><a class="header-anchor" href="#_8-2参数" aria-hidden="true">#</a> 8.2参数</h3><ul><li>query查询条件，指定要更新符合哪些条件的文档</li><li>update更新后的对象或指定一些更新的操作符 <ul><li>$set直接指定更新后的值</li><li>$inc在原基础上累加</li></ul></li><li>upsert可选，这个参数的意思是，如果不存在符合条件的记录时是否插入updateObj，默认时false，不插入</li><li>multi可选，mongodb默认只更新找到的第一条记录，如果这个参数为true，就更新所有符合条件的记录</li></ul><h3 id="_8-3upsert" tabindex="-1"><a class="header-anchor" href="#_8-3upsert" aria-hidden="true">#</a> 8.3upsert</h3><p>将<code>students</code>集合中数据中<code>name</code>是zfpx2的值修改为zfpx22</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; db.students.insert({_id:1,name:&#39;zfpx1&#39;});
WriteResult({ &quot;nInserted&quot; : 1 })
&gt; db.students.update({_id:2},{name:&#39;zfpx2&#39;},{upsert:true});
WriteResult({ &quot;nMatched&quot; : 0, &quot;nUpserted&quot; : 1, &quot;nModified&quot; : 0, &quot;_id&quot; : 2 })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_8-4multi" tabindex="-1"><a class="header-anchor" href="#_8-4multi" aria-hidden="true">#</a> 8.4multi</h3><p>如果有多条name是zfpx2的数据只更新一条,如果想全部更新需要指定<code>{multi:true}</code>的参数</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.students.update({name:&#39;zfpx2&#39;},{$set:{age:10}},{multi:true});
WriteResult({ &quot;nMatched&quot; : 2, &quot;nUpserted&quot; : 0, &quot;nModified&quot; : 2 });
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+v+`" alt="1550473345988"></p><h2 id="_9-更新操作符" tabindex="-1"><a class="header-anchor" href="#_9-更新操作符" aria-hidden="true">#</a> 9.更新操作符</h2><h3 id="_9-1-set" tabindex="-1"><a class="header-anchor" href="#_9-1-set" aria-hidden="true">#</a> 9.1$set</h3><p>直接指定更新后的值</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.c3.update({name:&#39;zfpx2&#39;},{$set:{age:10}},{multi:true});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-2-inc" tabindex="-1"><a class="header-anchor" href="#_9-2-inc" aria-hidden="true">#</a> 9.2$inc</h3><p>在原基础上累加</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.c3.update({name:&#39;zfpx2&#39;},{$inc:{age:1}},{multi:true});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-3-unset" tabindex="-1"><a class="header-anchor" href="#_9-3-unset" aria-hidden="true">#</a> 9.3$unset</h3><p>删除指定的键</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.c3.update({name:&#39;zfpx2&#39;},{$unset:{age:1}},{multi:true});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-4-push" tabindex="-1"><a class="header-anchor" href="#_9-4-push" aria-hidden="true">#</a> 9.4$push</h3><p>向数组中添加元素</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var result = db.student.update({name:&#39;张三&#39;},{
    $push:{&quot;hobbys&quot;:&quot;smoking&quot;}
});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-5-ne" tabindex="-1"><a class="header-anchor" href="#_9-5-ne" aria-hidden="true">#</a> 9.5$ne</h3><p><code>$ne</code>类似于MYSQL的 <code>not in</code> 或者<code>not exists</code></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.student.update({name:&#39;zfpx1&#39;,hobbys:{$ne:&#39;smoking&#39;}},{$push:{&quot;hobbys&quot;:&quot;smoking&quot;}});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-6-addtoset" tabindex="-1"><a class="header-anchor" href="#_9-6-addtoset" aria-hidden="true">#</a> 9.6$addToSet</h3><p>向集合中添加元素</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.student.update({name:&#39;zfpx1&#39;},{$addToSet:{&quot;hobbys&quot;:&quot;smoking&quot;}});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-7-each" tabindex="-1"><a class="header-anchor" href="#_9-7-each" aria-hidden="true">#</a> 9.7$each</h3><p>把数组中的元素逐个添加到集合中</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var hobbys = [&quot;A&quot;,&#39;B&#39;];
db.student.update({name:&#39;zfpx1&#39;},{$addToSet:{hobbys:{$each:hobbys}}});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_9-8-pop" tabindex="-1"><a class="header-anchor" href="#_9-8-pop" aria-hidden="true">#</a> 9.8$pop</h3><p>从数组中移除指定的索引中对应的元素</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.student.update({name:&#39;zfpx1&#39;},{$pop:{hobbys:1}});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_9-9修改指定索引元素" tabindex="-1"><a class="header-anchor" href="#_9-9修改指定索引元素" aria-hidden="true">#</a> 9.9修改指定索引元素</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.c3.update({name:&#39;zfpx1&#39;},{$set:{&quot;hobbys.0&quot;:&quot;smoking2&quot;}});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_10-删除文档" tabindex="-1"><a class="header-anchor" href="#_10-删除文档" aria-hidden="true">#</a> 10.删除文档</h2><h3 id="_10-1语法" tabindex="-1"><a class="header-anchor" href="#_10-1语法" aria-hidden="true">#</a> 10.1语法</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.collection.remove(
   &lt;query&gt;,
   {
     justOne: &lt;boolean&gt;
   }
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_10-2参数" tabindex="-1"><a class="header-anchor" href="#_10-2参数" aria-hidden="true">#</a> 10.2参数</h3><ul><li>query：（可选）删除的文档的条件</li><li>justOne：（可选）如果设为true或1，则只删除匹配到的多个文档中的第一个</li></ul><h3 id="_10-3实例" tabindex="-1"><a class="header-anchor" href="#_10-3实例" aria-hidden="true">#</a> 10.3实例</h3><p>删除worker集合里name是zfpx2的所有文档数据</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; db.students.remove({name:&#39;zfpx2&#39;});
WriteResult({ &quot;nRemoved&quot; : 2 })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>即使匹配多条也只删除一条</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; db.students.remove({name:&quot;zfpx2&quot;},{justOne:true})
WriteResult({ &quot;nRemoved&quot; : 1 })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+b+'" alt="1550473096293"></p><p><img src="'+m+`" alt="1550472964865"></p><h2 id="_11-查询文档" tabindex="-1"><a class="header-anchor" href="#_11-查询文档" aria-hidden="true">#</a> 11.查询文档</h2><h3 id="_11-1find" tabindex="-1"><a class="header-anchor" href="#_11-1find" aria-hidden="true">#</a> 11.1find</h3><p>语法：<code>db.collection_name.find()</code></p><p>参数：</p><p>collection_name集合的名字</p><p>实例：查询students下所有的文档</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.students.find()
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>find().pretty()</code>查找并格式化数据</p><p><img src="`+g+`" alt="1550473169233"></p><h3 id="_11-2查询指定列" tabindex="-1"><a class="header-anchor" href="#_11-2查询指定列" aria-hidden="true">#</a> 11.2查询指定列</h3><p>语法：<code>db.collection_name.find({queryWhere},{key:1,key:1})</code></p><p>参数列表：</p><ul><li>collection_name集合的名字</li><li>queryWhere参阅查询条件操作符</li><li>key指定要返回的列</li><li>1表示要显示</li></ul><p>实例：只返回显示age列</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; db.students.find({},{age:1})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_11-3findone" tabindex="-1"><a class="header-anchor" href="#_11-3findone" aria-hidden="true">#</a> 11.3findOne</h3><p>查询匹配结果的第一条数据</p><p>语法：</p><p><code>db.collection_name.findOne()</code></p><p>实例：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&gt; db.students.findOne(
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+k+`" alt="1550473244117"></p><h3 id="_11-4-in" tabindex="-1"><a class="header-anchor" href="#_11-4-in" aria-hidden="true">#</a> 11.4$in</h3><p>查询字段在某个范围内</p><p>语法：</p><p><code>db.student.find({age:{$in:[30,100]}},{name:1,age:1})</code></p><h3 id="_11-5-nin" tabindex="-1"><a class="header-anchor" href="#_11-5-nin" aria-hidden="true">#</a> 11.5$nin</h3><p>查询字段不在某个范围内</p><p><code>db.student.find({age:{$nin:[30,100]}},{name:1,age:1})</code></p><h3 id="_11-6-not" tabindex="-1"><a class="header-anchor" href="#_11-6-not" aria-hidden="true">#</a> 11.6$not</h3><p>对特定条件取反</p><ul><li><code>db.student.find({age:{$not:{$gte:20,$lte:30}}})</code></li></ul><h3 id="_11-7array" tabindex="-1"><a class="header-anchor" href="#_11-7array" aria-hidden="true">#</a> 11.7array</h3><p>对数组的查询</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>//按所有元素匹配
//let result = db.student.find({friends:[ &quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot; ]});
//匹配一项 包含A的就可以
//let result = db.student.find({friends:&quot;A&quot;});
//$all 必须同时包含A B
//let result = db.student.find({friends:{$all:[&#39;A&#39;,&quot;B&quot;]}});
//$in 或者关系 ，包含A或者B
//let result = db.student.find({friends:{$in:[&#39;A&#39;,&quot;B&quot;]}});
//$size 按数组的长度去匹配
//let result = db.student.find({friends:{$size:4}});
//$slice 只返回数组中的某一部分
//let result = db.student.find({friends:{$size:5}},{name:1,friends:{$slice:2}});
//let result = db.student.find({friends:{$size:5}},{name:1,friends:{$slice:-2}});
$slice:[&quot;$array&quot;, [startIndex, ] length ] （startIndex可以省略，默认从0开始）
&quot;friends&quot; : [ &quot;A&quot;, &quot;B&quot; ] }   &quot;friends&quot; : [ &quot;C&quot;, &quot;D&quot; ]
db.stu.find({},{friends:{$slice:[0,3]}});  &quot;friends&quot; : [ &quot;A&quot;, &quot;B&quot;, &quot;C&quot; ]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_11-8where" tabindex="-1"><a class="header-anchor" href="#_11-8where" aria-hidden="true">#</a> 11.8where</h3><p><code>db.student.find({$where:&quot;this.age&gt;30&quot;},{name:1,age:1});</code></p><h3 id="_11-9cursor" tabindex="-1"><a class="header-anchor" href="#_11-9cursor" aria-hidden="true">#</a> 11.9cursor</h3><ul><li>游标不是查询结果，而是查询的一个返回资源或者接口，通过这个接口，可以逐条读取数据</li></ul><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var result = db.student.find();

//while(result.hasNext()){
//    printjson(result.next());
//}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_12-条件操作符" tabindex="-1"><a class="header-anchor" href="#_12-条件操作符" aria-hidden="true">#</a> 12.条件操作符</h2><p>条件操作符用于比较两个表达式并从mongoDB集合中获取数据</p><h3 id="_12-1大于操作符" tabindex="-1"><a class="header-anchor" href="#_12-1大于操作符" aria-hidden="true">#</a> 12.1大于操作符</h3><p>语法：</p><p><code>db.collectoin_name.find({&lt;key&gt;:{$gt:&lt;value&gt;}})</code></p><p>参数：</p><ul><li>collection_name集合名称</li><li>key字段</li><li>value值</li></ul><p>实例：查询age大于30的数据</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.students.find({age:{$gt:30}})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-2大于等于操作符" tabindex="-1"><a class="header-anchor" href="#_12-2大于等于操作符" aria-hidden="true">#</a> 12.2大于等于操作符</h3><p><strong>语法</strong></p><p><code>db.collectoin_name.find({&lt;key&gt;:{$gte:&lt;value&gt;}})</code></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li><li>key 字段</li><li>value 值</li></ul><p>实例：查询age 3大于等于30 的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">$gte</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-3小于操作符" tabindex="-1"><a class="header-anchor" href="#_12-3小于操作符" aria-hidden="true">#</a> 12.3小于操作符</h3><p><strong>语法</strong></p><p><code>db.collectoin_name.find( {&lt;key&gt;:{$lt:&lt;value&gt;}})</code></p><p><strong>参数</strong></p><ul><li>collectoin_name集合名称</li><li>key 字段</li><li>value 值</li></ul><p><strong>实例</strong>：查询age 小于30的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">$lt</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-4小于等于操作符" tabindex="-1"><a class="header-anchor" href="#_12-4小于等于操作符" aria-hidden="true">#</a> 12.4小于等于操作符</h3><p><strong>语法</strong></p><p><code>db.collectoin_name.find({&lt;key&gt;:{$lte:&lt;value&gt;}})</code></p><p><strong>参数</strong></p><ul><li>collectoin_name集合名词</li><li>key字段</li><li>value值</li></ul><p>实例：查询age 小于等于30的数据</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.students.find({age: {$lte: 30}}) 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-5同时使用-gte和-lte" tabindex="-1"><a class="header-anchor" href="#_12-5同时使用-gte和-lte" aria-hidden="true">#</a> 12.5同时使用$gte和$lte</h3><p><strong>语法</strong></p><p><code>db.collectoin_name.find({&lt;key&gt;:{$gte:&lt;value&gt;},&lt;key&gt;:{$lte:&lt;value&gt;}})</code></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li><li>key 字段</li><li>value 值</li></ul><p><strong>实例</strong> 查询age 大于等于 30 并且 age 小于等于 50 的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">$gte</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token literal-property property">$lte</span><span class="token operator">:</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-6等于" tabindex="-1"><a class="header-anchor" href="#_12-6等于" aria-hidden="true">#</a> 12.6等于</h3><p><strong>语法</strong></p><p><code>db.collectoin_name.find({&lt;key&gt;:&lt;value&gt;,&lt;key&gt;:&lt;value&gt;})</code></p><p><strong>参数</strong></p><ul><li>collectoin_name集合名词</li><li>key字段</li><li>value值</li></ul><p>实例：查询age = 30的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string-property property">&quot;age&quot;</span><span class="token operator">:</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\`
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-7使用-id进行查询" tabindex="-1"><a class="header-anchor" href="#_12-7使用-id进行查询" aria-hidden="true">#</a> 12.7使用_id进行查询</h3><p><strong>语法</strong></p><p><code>db.collectoin_name.find({&quot;_id&quot; : ObjectId(&quot;value&quot;)})</code></p><p><strong>参数</strong></p><ul><li>value <code>_id</code>的值</li></ul><p><strong>实例</strong> 查询_id是 562af23062d5a57609133974 数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&gt;</span> db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">_id</span><span class="token operator">:</span><span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;5adb666ecd738e9771638985&quot;</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">{</span> <span class="token string-property property">&quot;_id&quot;</span> <span class="token operator">:</span> <span class="token function">ObjectId</span><span class="token punctuation">(</span><span class="token string">&quot;5adb666ecd738e9771638985&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string-property property">&quot;name&quot;</span> <span class="token operator">:</span> <span class="token string">&quot;zzzz&quot;</span> <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_12-8查询结果集的条数" tabindex="-1"><a class="header-anchor" href="#_12-8查询结果集的条数" aria-hidden="true">#</a> 12.8查询结果集的条数</h3><p><strong>语法</strong></p><p><code>db.collectoin_name.find().count()</code></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li></ul><p><strong>实例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_12-9正则匹配" tabindex="-1"><a class="header-anchor" href="#_12-9正则匹配" aria-hidden="true">#</a> 12.9正则匹配</h3><p><strong>语法</strong></p><p><code>db.collection_name.find({key:/value/})</code></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li><li>key 字段</li><li>value 值</li></ul><p><strong>实例</strong></p><p>查询name里包含zhang的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">value</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>查询某个字段的值当中是否以另一个值开头</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^zhang</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><img src="`+x+`" alt="1550473420954"></p><h2 id="_13-与和或" tabindex="-1"><a class="header-anchor" href="#_13-与和或" aria-hidden="true">#</a> 13.与和或</h2><h3 id="_13-1and" tabindex="-1"><a class="header-anchor" href="#_13-1and" aria-hidden="true">#</a> 13.1and</h3><p>find方法可以传入多个键(key)，每个键(key)以逗号隔开</p><p><strong>语法</strong></p><p><code>db.collection_name.find({key1:value1, key2:value2})</code></p><p><strong>实例</strong></p><p>查询name是zfpx并且age是1的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zfpx&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_13-2or" tabindex="-1"><a class="header-anchor" href="#_13-2or" aria-hidden="true">#</a> 13.2or</h3><p><strong>语法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
   <span class="token punctuation">{</span>
      <span class="token literal-property property">$or</span><span class="token operator">:</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span><span class="token literal-property property">key1</span><span class="token operator">:</span> value1<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">key2</span><span class="token operator">:</span>value2<span class="token punctuation">}</span>
      <span class="token punctuation">]</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实例</strong></p><p>查询age = 30 或者 age = 50 的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">$or</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_13-3and和or联用" tabindex="-1"><a class="header-anchor" href="#_13-3and和or联用" aria-hidden="true">#</a> 13.3and和or联用</h3><p><strong>语法</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>collection_name<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>
   <span class="token punctuation">{</span>
     <span class="token literal-property property">key1</span><span class="token operator">:</span>value1<span class="token punctuation">,</span>
     <span class="token literal-property property">key2</span><span class="token operator">:</span>value2<span class="token punctuation">,</span>
     <span class="token literal-property property">$or</span><span class="token operator">:</span> <span class="token punctuation">[</span>
   <span class="token punctuation">{</span><span class="token literal-property property">key1</span><span class="token operator">:</span> value1<span class="token punctuation">}</span><span class="token punctuation">,</span>
   <span class="token punctuation">{</span><span class="token literal-property property">key2</span><span class="token operator">:</span>value2<span class="token punctuation">}</span>
     <span class="token punctuation">]</span>
   <span class="token punctuation">}</span>
<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>实例</strong></p><p>查询 name是zfpx 并且 age是30 或者 age是 50 的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zfpx&#39;</span><span class="token punctuation">,</span><span class="token literal-property property">$or</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_14-分页查询" tabindex="-1"><a class="header-anchor" href="#_14-分页查询" aria-hidden="true">#</a> 14.分页查询</h2><h3 id="_14-1limit" tabindex="-1"><a class="header-anchor" href="#_14-1limit" aria-hidden="true">#</a> 14.1limit</h3><p>读取指定数量的数据记录</p><p><strong>语法</strong></p><p><code>db.collectoin_name.find().limit(number)</code></p><p><strong>参数</strong></p><ul><li>collectoin_name集合</li><li>number读取的条数</li></ul><p><strong>实例</strong></p><p>查询前3条数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_14-2skip" tabindex="-1"><a class="header-anchor" href="#_14-2skip" aria-hidden="true">#</a> 14.2skip</h3><p>跳过指定数量的数据，skip方法同样接受一个数字参数作为跳过的记录条数</p><p><strong>语法</strong></p><p><code>db.collectoin_name.find().skip(number)</code></p><p><strong>参数</strong></p><ul><li>collectoin_name集合</li><li>number跳过的条数</li></ul><p><strong>实例</strong></p><p>查询3条以后的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_14-3skip-limit" tabindex="-1"><a class="header-anchor" href="#_14-3skip-limit" aria-hidden="true">#</a> 14.3skip+limit</h3><p>通常用这种方式来实现分页功能</p><p><strong>语法</strong></p><p><code>db.collectoin_name.find().skip(skipNum).limit(limitNum)</code></p><p><strong>参数</strong></p><ul><li>collectoin_name 集合名称</li><li>skipNum 跳过的条数</li><li>limitNum 限制返回的条数</li></ul><p><strong>实例</strong></p><p>查询在4-6之间的数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span>students<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="_14-4sort排序" tabindex="-1"><a class="header-anchor" href="#_14-4sort排序" aria-hidden="true">#</a> 14.4sort排序</h3><p>sort()方法可以通过参数指定排序的字段，并使用 1 和 -1 来指定排序的方式，其中 1 为升序排列，而-1是用于降序排列。 <strong>语法</strong></p><p><code>db.collectoin_name.find().sort({key:1})</code><code>db.collectoin_name.find().sort({key:-1})</code></p><p><strong>参数</strong></p><ul><li>collectoin_name集合</li><li>key表示字段</li></ul><p><strong>实例</strong></p><p>查询出并升序排序 {age:1} age表示按那个字段排序 1表示升序</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.students.find().sort({age:1})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_15-执行脚本" tabindex="-1"><a class="header-anchor" href="#_15-执行脚本" aria-hidden="true">#</a> 15.执行脚本</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> username <span class="token operator">=</span> <span class="token string">&#39;zfpx&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> password <span class="token operator">=</span> <span class="token string">&#39;123456&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string-property property">&quot;username&quot;</span><span class="token operator">:</span> username<span class="token punctuation">,</span> <span class="token string-property property">&quot;password&quot;</span><span class="token operator">:</span> password <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;students&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//选择users数据库</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;write &#39;</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;students&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zfpx&quot;</span> <span class="token operator">+</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> cost <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;cost &#39;</span> <span class="token operator">+</span> cost <span class="token operator">+</span> <span class="token string">&#39; ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> start <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token string">&#39;students&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> users <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    users<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">&quot;username&quot;</span><span class="token operator">:</span> <span class="token string">&quot;zfpx&quot;</span> <span class="token operator">+</span> i <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
db<span class="token punctuation">.</span>users<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>users<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> cost <span class="token operator">=</span> Date<span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> start<span class="token punctuation">;</span>
<span class="token function">print</span><span class="token punctuation">(</span><span class="token string">&#39;cost &#39;</span> <span class="token operator">+</span> cost <span class="token operator">+</span> <span class="token string">&#39; ms&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在命令行中执行</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>script&gt;mongo 1.js
MongoDB shell version: 2.6.7
connecting to: test
connecting to: students
write WriteResult({ &quot;nInserted&quot; : 1 })
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_16-备份与导出" tabindex="-1"><a class="header-anchor" href="#_16-备份与导出" aria-hidden="true">#</a> 16.备份与导出</h2><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>mongodump
    -- host 127.0.0.1
    -- port 27017
    -- out D:/databack/backup
    -- collection mycollection
    -- db test
    -- username
    -- password
//mongodump --host 127.0.0.1 --port 27017 --out ./backup --collection users --db students
//db.users.drop();

mongorestore
--host
--port
--username
--password

// mongorestore --host 127.0.0.1 --port 27017 ./backup
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_17-权限" tabindex="-1"><a class="header-anchor" href="#_17-权限" aria-hidden="true">#</a> 17.权限</h2><h3 id="_17-1创建用户" tabindex="-1"><a class="header-anchor" href="#_17-1创建用户" aria-hidden="true">#</a> 17.1创建用户</h3><ul><li>使用<code>use admin</code>进入我们的admin库</li><li>使用<code>db.createUser</code>方法来创建集合</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span><span class="token string">&#39;zfpx&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">pwd</span><span class="token operator">:</span><span class="token string">&#39;123456&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">customData</span><span class="token operator">:</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;zhufengpeixun&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">email</span><span class="token operator">:</span><span class="token string">&#39;zhufengpeixun@126.com&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">9</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">roles</span><span class="token operator">:</span><span class="token punctuation">[</span>
        <span class="token punctuation">{</span>
          <span class="token literal-property property">role</span><span class="token operator">:</span><span class="token string">&#39;readWrite&#39;</span><span class="token punctuation">,</span>
          <span class="token literal-property property">db</span><span class="token operator">:</span><span class="token string">&#39;school&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token string">&#39;read&#39;</span>
    <span class="token punctuation">]</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打开mongo服务</p><p><code>mongo --config /user/local/etc/mongod/conf</code></p><p>创建管理员</p><p><code>db.createUser({user:&quot;admin&quot;,pwd:&quot;admin&quot;,roles:[&quot;root&quot;]})</code></p><p>给shoppingmall数据库创建用户</p><p><img src="`+f+'" alt="1550458133626"></p><p>授权认证</p><p><code>db.auth(&quot;&quot;,&quot;&quot;)</code></p><p>返回1说明认证成功</p><p><img src="'+_+`" alt="1550456840546"></p><p>给使用的数据库添加用户</p><h3 id="_17-2查询用户" tabindex="-1"><a class="header-anchor" href="#_17-2查询用户" aria-hidden="true">#</a> 17.2查询用户</h3><p><code>db.system.users.find()</code></p><h3 id="_17-3删除用户" tabindex="-1"><a class="header-anchor" href="#_17-3删除用户" aria-hidden="true">#</a> 17.3删除用户</h3><p><code>db.system.users.remove({user:&#39;zfpx&#39;})</code></p><h3 id="_17-4启动数据库权限检查" tabindex="-1"><a class="header-anchor" href="#_17-4启动数据库权限检查" aria-hidden="true">#</a> 17.4启动数据库权限检查</h3><p><code>mongod --auth</code><code>mongo -u zfpx -p 123456 127.0.0.1:27017/admin</code></p><h3 id="_17-5鉴权" tabindex="-1"><a class="header-anchor" href="#_17-5鉴权" aria-hidden="true">#</a> 17.5鉴权</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>use admin;
db.auth(&#39;zfpx&#39;,&#39;zfpx&#39;);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>正确返回1，如果错误返回0</li></ul><h2 id="_18-索引" tabindex="-1"><a class="header-anchor" href="#_18-索引" aria-hidden="true">#</a> 18.索引</h2><h3 id="_18-1准备数据" tabindex="-1"><a class="header-anchor" href="#_18-1准备数据" aria-hidden="true">#</a> 18.1准备数据</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var db = connect(&#39;school&#39;);//选择users数据库
var users = [];
for(var i=0;i&lt;20;i++){
    users.push({_id:i,name:&#39;zfpx&#39;+i});
}
print(users.length);
db.users.insert(users);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-2打印出查询时间" tabindex="-1"><a class="header-anchor" href="#_18-2打印出查询时间" aria-hidden="true">#</a> 18.2打印出查询时间</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>var startTime = Date.now();
var  db = connect(&#39;school&#39;);          
var  records=db.users.find({name:&quot;zfpx100&quot;});
records.forEach(function(item){printjson(item)});
print(Date.now() - startTime);
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_18-3建立索引" tabindex="-1"><a class="header-anchor" href="#_18-3建立索引" aria-hidden="true">#</a> 18.3建立索引</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>db.users.ensureIndex({name:1});
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_19-附录" tabindex="-1"><a class="header-anchor" href="#_19-附录" aria-hidden="true">#</a> 19.附录</h2><h3 id="mongovue卸载" tabindex="-1"><a class="header-anchor" href="#mongovue卸载" aria-hidden="true">#</a> mongoVue卸载</h3><p>安装不上的话用msiexec命令进行安装</p><p><img src="`+y+'" alt="1550463512370"></p><h3 id="查看端口号对应的应用程序" tabindex="-1"><a class="header-anchor" href="#查看端口号对应的应用程序" aria-hidden="true">#</a> 查看端口号对应的应用程序</h3><p><code>netstat -anto | findstr &quot;[端口号]&quot;</code></p><p><img src="'+q+`" alt="1566628733305"></p><p>到【任务管理器】中找【详细信息】所对应的pid，就知道是哪个进程了。</p><h3 id="objectid构成" tabindex="-1"><a class="header-anchor" href="#objectid构成" aria-hidden="true">#</a> ObjectId构成</h3><p>之前我们使用MySQL等关系型数据库时，主键都是设置成自增的。但在分布式环境下，这种方法就不可行了，会产生冲突。为此，MongoDB采用了一个称之为ObjectId的类型来做主键。ObjectId是一个12字节的 BSON 类型字符串。按照字节顺序，一次代表：</p><ul><li>4字节：UNIX时间戳</li><li>3字节：表示运行MongoDB的机器</li><li>2字节：表示生成此_id的进程</li><li>3字节：由一个随机数开始的计数器生成的值</li></ul><h3 id="mongodb启动命令mongod参数说明" tabindex="-1"><a class="header-anchor" href="#mongodb启动命令mongod参数说明" aria-hidden="true">#</a> Mongodb启动命令mongod参数说明</h3><table><thead><tr><th>选项</th><th>含义</th></tr></thead><tbody><tr><td>--port</td><td>指定服务端口号，默认端口27017</td></tr><tr><td>--logpath</td><td>指定MongoDB日志文件，注意是指定文件不是目录</td></tr><tr><td>--logappend</td><td>使用追加的方式写日志</td></tr><tr><td>--dbpath</td><td>指定数据库路径</td></tr><tr><td>--directoryperdb</td><td>设置每个数据库将被保存在一个单独的目录</td></tr></tbody></table><h3 id="集合命令" tabindex="-1"><a class="header-anchor" href="#集合命令" aria-hidden="true">#</a> 集合命令</h3><ul><li><p>db.students.help();</p></li><li><p>DBCollection help</p></li><li><p>db.students.find().help() - show DBCursor help 显示游标帮助</p></li><li><p>db.students.count() 显示条数</p></li><li><p>db.students.copyTo(newColl) - duplicates collection by copying all docum ents to newColl; no indexes are copied. 把一个旧集合拷贝到一个新的集合，不拷贝索引</p></li><li><p>db.students.convertToCapped(maxBytes) - calls {convertToCapped:&#39;students &#39;, size:maxBytes}} command</p></li><li><p>db.students.dataSize() 数据大小</p></li><li><p>db.students.distinct( key ) - e.g. db.students.distinct( &#39;x&#39; ) 统计唯一的key的数量</p></li><li><p>db.students.drop() drop the collection ，删除集合</p></li><li><p>db.students.dropIndex(index) - e.g. db.students.dropIndex( &quot;indexName&quot; ) 删除索引 or db.students.dropIndex( { &quot;indexKey&quot; : 1 } )</p></li><li><p>db.students.dropIndexes() 删除 所有的索引</p></li><li><p>db.students.ensureIndex(keypattern[,options]) - options is an object wit h these possible fields: name, unique, dropDups 添加索引</p></li><li><p>db.students.reIndex()</p></li><li><p>db.students.find([query],[fields]) - query is an optional query filter. fields is optional set of fields to return. 查找文档</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>     e.g. db.students.find( {x:
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>77} , {name:1, x:1} )</p></li><li><p>db.students.find(...).count() 数量</p></li><li><p>db.students.find(...).limit(n) 限制返回的条数</p></li><li><p>db.students.find(...).skip(n) 设置跳过的条数</p></li><li><p>db.students.find(...).sort(...) 排序</p></li><li><p>db.students.findOne([query]) 查找一条</p></li><li><p>db.students.findAndModify( { update : ... , remove : bool [, query: {}, sort: {}, &#39;new&#39;: false] } ) 查找并且修改 更新后的值，是否删除，查询条件 排序 是否返回新值</p></li><li><p>db.students.getDB() get DB object associated with collection 获得DB</p></li><li><p>db.students.getPlanCache() get query plan cache associated with collecti on</p></li><li><p>db.students.getIndexes() 获取索引</p></li><li><p>db.students.group( { key : ..., initial: ..., reduce : ...[, cond: ...] } ) 分组统计</p></li><li><p>db.students.insert(obj) 插入文档</p></li><li><p>db.students.mapReduce( mapFunction , reduceFunction , ) 统计</p></li><li><p>db.students.aggregate( [pipeline], ) - performs an agg regation on a collection; returns a cursor 聚合</p></li><li><p>db.students.remove(query) 删除</p></li><li><p>db.students.renameCollection( newName , ) renames the colle ction. 重命名集合</p></li><li><p>db.students.runCommand( name , ) runs a db command with the gi ven name where the first param is the collection name</p></li><li><p>db.students.save(obj) 保存对象</p></li><li><p>db.students.stats() 统计信息</p></li><li><p>db.students.storageSize() - includes free space allocated to this collec tion</p></li><li><p>db.students.totalIndexSize() - size in bytes of all the indexes</p></li><li><p>db.students.totalSize() - storage allocated for all data and indexes</p></li><li><p>db.students.update(query, object[, upsert_bool, multi_bool]) - instead o f two flags, you can pass an object with fields: upsert, multi 更新</p></li><li><p>db.students.validate( ) - SLOW</p></li><li><p>db.students.getShardVersion() - only for use with sharding</p></li><li><p>db.students.getShardDistribution() - prints statistics about data distri bution in the cluster</p></li><li><p>db.students.getSplitKeysForChunks( ) - calculates split p oints over all chunks and returns splitter function</p></li><li><p>db.students.getWriteConcern() - returns the write concern used for any o perations on this collection, inherited from server/db if set</p></li><li><p>db.students.setWriteConcern( ) - sets the write conc ern for writes to the collection</p></li><li><p>db.students.unsetWriteConcern( ) - unsets the write concern for writes to the collection</p></li></ul><h2 id="_20-角色" tabindex="-1"><a class="header-anchor" href="#_20-角色" aria-hidden="true">#</a> 20.角色</h2><h3 id="_20-1数据库用户角色" tabindex="-1"><a class="header-anchor" href="#_20-1数据库用户角色" aria-hidden="true">#</a> 20.1数据库用户角色</h3><p>针对每一个数据库进行控制。</p><ul><li>read :提供了读取所有非系统集合，以及系统集合中的system.indexes, system.js, system.namespaces</li><li>readWrite: 包含了所有read权限，以及修改所有非系统集合的和系统集合中的system.js的权限</li></ul><h3 id="_20-2数据库管理角色" tabindex="-1"><a class="header-anchor" href="#_20-2数据库管理角色" aria-hidden="true">#</a> 20.2数据库管理角色</h3><p>每一个数据库包含了下面的数据库管理角色。</p>`,320),I=n("li",null,"dbOwner：该数据库的所有者，具有该数据库的全部权限。",-1),C={href:"http://docs.mongodb.org/manual/reference/built-in-roles/#dbAdmin%EF%BC%89",target:"_blank",rel:"noopener noreferrer"},W=n("li",null,"userAdmin：为当前用户创建、修改用户和角色。拥有userAdmin权限的用户可以将该数据库的任意权限赋予任意的用户。",-1),O=s('<h3 id="_20-3集群管理权限" tabindex="-1"><a class="header-anchor" href="#_20-3集群管理权限" aria-hidden="true">#</a> 20.3集群管理权限</h3><ul><li>admin数据库包含了下面的角色，用户管理整个系统，而非单个数据库。这些权限包含了复制集和共享集群的管理函数。</li><li>clusterAdmin：提供了最大的集群管理功能。相当于clusterManager, clusterMonitor, and hostManager和dropDatabase的权限组合。</li><li>clusterManager：提供了集群和复制集管理和监控操作。拥有该权限的用户可以操作config和local数据库（即分片和复制功能）</li><li>clusterMonitor：仅仅监控集群和复制集。</li><li>hostManager：提供了监控和管理服务器的权限，包括shutdown节点，logrotate, repairDatabase等。 备份恢复权限：admin数据库中包含了备份恢复数据的角色。包括backup、restore等等。</li></ul><h3 id="_20-4所有数据库角色" tabindex="-1"><a class="header-anchor" href="#_20-4所有数据库角色" aria-hidden="true">#</a> 20.4所有数据库角色</h3><ul><li>admin数据库提供了一个mongod实例中所有数据库的权限角色：</li><li>readAnyDatabase：具有read每一个数据库权限。但是不包括应用到集群中的数据库。</li><li>readWriteAnyDatabase：具有readWrite每一个数据库权限。但是不包括应用到集群中的数据库。</li><li>userAdminAnyDatabase：具有userAdmin每一个数据库权限，但是不包括应用到集群中的数据库。</li><li>dbAdminAnyDatabase：提供了dbAdmin每一个数据库权限，但是不包括应用到集群中的数据库。</li></ul><h3 id="_20-5超级管理员权限" tabindex="-1"><a class="header-anchor" href="#_20-5超级管理员权限" aria-hidden="true">#</a> 20.5超级管理员权限</h3><ul><li>root: dbadmin到admin数据库、useradmin到admin数据库以及UserAdminAnyDatabase。但它不具有备份恢复、直接操作system.*集合的权限，但是拥有root权限的超级用户可以自己给自己赋予这些权限。</li></ul><h3 id="_20-6备份恢复角色" tabindex="-1"><a class="header-anchor" href="#_20-6备份恢复角色" aria-hidden="true">#</a> 20.6备份恢复角色</h3><p>backup、restore；</p><h3 id="_20-7内部角色" tabindex="-1"><a class="header-anchor" href="#_20-7内部角色" aria-hidden="true">#</a> 20.7内部角色</h3><p>__system</p>',10);function S(N,R){const e=o("ExternalLinkIcon");return d(),p("div",null,[w,n("p",null,[n("a",$,[a("Windows官方安装指南"),t(e)])]),z,n("p",null,[n("a",D,[a("Mac官方安装指南"),t(e)])]),n("ol",null,[M,n("li",null,[n("p",null,[a("再安装可视化工具 "),n("a",B,[a("Robomongo"),t(e)])])])]),A,n("ul",null,[I,n("li",null,[a("dbAdmin：一些数据库对象的管理操作，但是没有数据库的读写权限。（参考："),n("a",C,[a("http://docs.mongodb.org/manual/reference/built-in-roles/#dbAdmin）"),t(e)])]),W]),O])}const U=i(j,[["render",S],["__file","index.html.vue"]]);export{U as default};
