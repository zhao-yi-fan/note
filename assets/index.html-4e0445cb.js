import{_ as n,p as a,q as s,Z as t}from"./framework-fdd38eac.js";const o="/assets/1570340730699-44b80ae8.png",e="/assets/1570340870903-31292485.png",p="/assets/1570341327030-b4eb4e23.png",i={},c=t('<h1 id="存储方案" tabindex="-1"><a class="header-anchor" href="#存储方案" aria-hidden="true">#</a> 存储方案</h1><h2 id="本地存储和服务器存储" tabindex="-1"><a class="header-anchor" href="#本地存储和服务器存储" aria-hidden="true">#</a> 本地存储和服务器存储</h2><h3 id="本地存储" tabindex="-1"><a class="header-anchor" href="#本地存储" aria-hidden="true">#</a> 本地存储</h3><p>本地存储：把一些信息存储到客户端本地（主要目的有很多，其中有一个就是实现多页面之间的信息共享）</p><ul><li><p>离线缓存：<code>xxx.manifest</code>H5处理离线缓存还是存在一些硬伤的，所以真是项目中一般还是传统的native app来完成这件事情</p></li><li><p><code>localStorage</code>/<code>sessionStorage</code>：H5中新增加的API，基于这个API可以把一些数据缓存到客户端本地（常用）</p></li><li><p><code>IndexedDB</code>/<code>webSQL</code>：本地数据库存储</p></li><li><p><code>Cookie</code>：本地信息存储（常用）</p></li><li><p><code>CacheStorage</code>/<code>ApplicationCache</code>：本地缓存存储</p></li><li><p>...</p></li></ul><h3 id="session和cookie的关联" tabindex="-1"><a class="header-anchor" href="#session和cookie的关联" aria-hidden="true">#</a> session和cookie的关联</h3><ol><li>session是服务器存储，cookie是客户端存储</li><li>在服务器端建立session之后，服务器和当前客户端之间会建立一个唯一的标识（sessionID/sid），而本次存储的session信息都存放到对应的sid下（目的是为了区分不同客户端都在服务器上建立session信息，后期查找的时候，可以找到自己当初建立的）</li><li>当服务器端把一些成功或者失败的结果返回给客户端的时候，在响应头信息中会增加set-cookie（客户端的cookie）字段，把connect.sid存储到客户端的cookie信息中 <code>set-cookie:connect.sid=s%3A065ap33FesyPQUQD0nszBFmXkW6c9EXJ.c%2FnxNtN6d%2F9Mv0oNvur51u3zK4vtIvzYSz%2BRrIDOdQw; Path=/; Expires=Tue, 17 Jul 2018 03:11:54 GMT; HttpOnly</code><code>HttpOnly</code>规定当前的cookie信息只能获取使用,但是不能修改</li><li>当客户端在向服务器发送任何请求的时候，在请求头中，都会把Cookie信息带上，传递给服务器（包含了之前存储的connect.sid信息） <code>Cookie:...;connect.sid=s%3A065ap33FesyPQUQD0nszBFmXkW6c9EXJ.c%2FnxNtN6d%2F9Mv0oNvur51u3zK4vtIvzYSz%2BRrlDOdQw</code></li></ol><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景" aria-hidden="true">#</a> 应用场景</h3><h4 id="页面之间信息的通信" tabindex="-1"><a class="header-anchor" href="#页面之间信息的通信" aria-hidden="true">#</a> 页面之间信息的通信</h4><p><strong>知识点</strong>：</p><ul><li><p>本地存储都是存储到当前浏览器指定的地方 在谷歌浏览器中存储的信息，在IE浏览器中获取不到，<strong>本地存储信息无法跨浏览器进行传输</strong></p></li><li><p>存储的信息是按照域来管理的 访问京东网站，把信息都存储到了jd.com中，其他域的网站中是无法直接获取这些信息的，<strong>本地存储不能直接跨域访问</strong></p></li></ul><p><strong>场景</strong>：</p><ul><li>登录/注册</li></ul><p>真实项目中的登录注册，是基于session服务器存储的登录信息，而不是本地存储（因为本地存储不安全：明文存储，直接在浏览器的控制台就可以看到）</p><p><img src="'+o+'" alt="1570340730699"></p><ul><li><p>记住用户名和密码（或者自动登录） 如果登录成功：</p><ol><li>把用户名和密码（经过加密的）存储到客户端本地</li><li>登录成功可能会跳转到其他页面</li><li>以后重新打开这个网站，首先看一下本地存储的信息中是否有用户名和密码，如果有（记住用户名和密码功能在），直接拿本地的信息向服务器发送请求，完成登录操作（类似于登录页面点击登录按钮）。成功该干嘛干嘛，如果拿本地存储的信息模拟登录失败，就跳转到登录页，重新登录即可。</li><li>重新打开登录页面，我们需要先从本地把信息获取到，把信息存放到对应的文本框中...</li></ol><p><img src="'+e+'" alt="1570340870903"></p></li><li><p>有A、B两个页面，A页面中有一个列表，点击列表中的每一项，跳转到B页面（详情页面），在B页面需要知道点击的是A中的哪条数据，从而展示不同的信息 <strong>解决方案</strong>：URL问号传参：&#39;B.html?xxx=xxx&#39;进入到B页面，首先把传递的参数获取到，根据传递的不同，我们从服务器端获取不同的数据，从而展示不同的内容，获取：<code>window.location.search</code><strong>前提</strong>：需要A中的某个操作可以跳转到B页面，此时才可以问号传参</p></li><li><p>比如加入购物车，再进入购物车之前，可以在商品页面把商品加入购物车，在没有进入购物车页面之前，添加商品的信息是存储到浏览器中的，进入购物车页面之后，购物车页面从浏览器中获取数据。 <img src="'+p+`" alt="1570341327030"> 以上是未登录状态，如果是登录状态 未登录状态下加入购物车的信息（session中存储），在登录后，都要先保存到数据库中，然后再把session信息清除 数据库 shopList数据表 id userId productId count ... 1 102 304 1 ... ... 数据库存储的目的是为了实现购物信息的跨平台共享</p></li><li><p>跳转到其他页面，返回上级页面的时候停留在之前最后一次点击的位置</p></li></ul><h4 id="做一些性能优化" tabindex="-1"><a class="header-anchor" href="#做一些性能优化" aria-hidden="true">#</a> 做一些性能优化</h4><p>把一些不经常改变的数据，在第一次从服务器端获取到之后，存储到客户端本地（记录一个存储时间），假设我们设置有效存储期是10分钟，那么10分钟以内，我们刷新页面，就不用再向服务器发送请求了，直接从本地数据中获取展示即可：超过10分钟，重新想服务器发送请求，请求回来最新数据参考第一次，也一样存储到本地中...</p><ul><li>减轻服务器压力</li><li>对于不经常更新的数据我们可以吧存储周期设置的长一些，有助于页面第二次渲染的时候，加快渲染的速度（移动端经常做这些事情）</li></ul><h2 id="localstorage和cookie" tabindex="-1"><a class="header-anchor" href="#localstorage和cookie" aria-hidden="true">#</a> localStorage和cookie</h2><p>真实项目中使用本地存储来完成一些需求的情况不是很多，一般都是基于服务器的session或者数据库存储完成的（服务器的session和本地的cookie是有关联的）。</p><p>如果不考虑兼容，就像基于本地存储来完成一些事情，那么一般都是用localStorage的（尤其是移动端开发）</p><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> localStorage</h3><p>特点：</p><ol><li>不兼容IE8及以下</li><li>有存储限制，一个源下最多只能存储5MB左右</li><li>本地永久存储，只要不手动删除，永远存储在本地。但是我们可以基于API，<code>removeItem/clear</code>手动清除一些自己想要删除的信息</li><li>杀毒软件或者浏览器的垃圾清理暂时不会清除localStorage（谷歌浏览器会清除localStorage等信息）</li><li>在隐私或者无痕浏览模式下，是记录localStorage的</li><li>localStorage和服务器没有任何关系</li></ol><p>用法：</p><p><code>localStorage.setItem([key],[value])</code>：[value]必须是字符串格式的（即使写的不是字符串，也会默认转换为字符串）</p><p><code>localStorage.getItem([key])</code>：通过属性名获取存储的信息</p><p><code>localStorage.removeItem([key])</code>：删除指定的存储信息</p><p><code>localStorage.clear()</code>：清除当前域下存储的所有信息</p><p><code>localStorage.key(0)</code>：基于索引获取指定的key名</p><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> cookie</h3><p>特点：</p><ol><li>兼容所有的浏览器</li><li>有存储的大小限制，一般一个源（一个域）只能存储4KB内容，一个中文汉字2B，英文字母或者数字1B。</li><li>有过期时间，我们可以自己手动设置这个时间</li><li>杀毒软件或者浏览器的垃圾清理都可能会把cookie信息强制清除掉</li><li>在隐私或者无痕浏览模式下，是不记录cookie的</li><li>cookie不是严格的本地存储，因为要和服务器之间来回传输</li></ol><p>用法：</p><p><code>document.cookie=&#39;&#39;</code>：设置cookie</p><p>cookie封装的js库</p><p>删除cookie的原理，就是把过期时间设置为现在时间之前，就会自动删除。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> cookie <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> setValue <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">,</span> expires <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1000</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> domain <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span><span class="token function">escape</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;expires=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>expires<span class="token punctuation">.</span><span class="token function">toGMTString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;path=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;domain=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> <span class="token function-variable function">getValue</span> <span class="token operator">=</span> <span class="token parameter">name</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> cookieInfo <span class="token operator">=</span> document<span class="token punctuation">.</span>cookie<span class="token punctuation">,</span>
            reg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">(?:^| )</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">=([^;]*)(?:;|$)</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            ary <span class="token operator">=</span> cookieInfo<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span>reg<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> ary <span class="token operator">?</span> <span class="token function">unescape</span><span class="token punctuation">(</span>ary<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">let</span> removeValue <span class="token operator">=</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> path <span class="token operator">=</span> <span class="token string">&#39;/&#39;</span><span class="token punctuation">,</span> domain <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> value <span class="token operator">=</span> <span class="token function">getValue</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            document<span class="token punctuation">.</span>cookie <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">= ;path=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>path<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;domain=</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>domain<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">;expires=Fri,02-Jan-1970 00:00:00 GMT</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">set</span><span class="token operator">:</span> setValue<span class="token punctuation">,</span>
        <span class="token literal-property property">get</span><span class="token operator">:</span> getValue<span class="token punctuation">,</span>
        <span class="token literal-property property">remove</span><span class="token operator">:</span> removeValue
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> sessionStorage</h2><p>sessionStorage和session没有任何关系，是两种东西。</p><p>sessionStorage和localStorage差不多。localStorage是永久存储，sessionStorage是临时存储，浏览器关闭就清除了。</p>`,42),l=[c];function u(r,k){return a(),s("div",null,l)}const m=n(i,[["render",u],["__file","index.html.vue"]]);export{m as default};
