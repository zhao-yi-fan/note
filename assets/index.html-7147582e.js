import{_ as p,n as t,p as e,q as o,s as n,R as c,t as i,Z as s}from"./framework-fdd38eac.js";const l="/assets/1553927499730-e103cbef.png",u="/assets/1553928770136-05f9e562.png",r="/assets/1553931945847-448b3e6c.png",k="/assets/1553933352598-660fe6db.png",d="/assets/1553934953012-2e35570c.png",v="/assets/1553937013206-b145878e.png",m={},b=s(`<h1 id="koa" tabindex="-1"><a class="header-anchor" href="#koa" aria-hidden="true">#</a> Koa</h1><h2 id="koa访问mysql数据库操作" tabindex="-1"><a class="header-anchor" href="#koa访问mysql数据库操作" aria-hidden="true">#</a> koa访问mysql数据库操作</h2><h3 id="koa基本知识" tabindex="-1"><a class="header-anchor" href="#koa基本知识" aria-hidden="true">#</a> koa基本知识</h3><p>koa依赖co, 最新版基于promise实现.我们使用koa的时候都是通过use添加一个中间件，router也是一个个中间件，我们看一下use都做了什么？</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>app<span class="token punctuation">.</span><span class="token function-variable function">use</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>middleware<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fn<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它只是将参数保存起来，然后返回引用，最后由co完成调用，因此要求中间件中的异步调用都使用Promise形式。</p><h3 id="实现方法一-co-mysql" tabindex="-1"><a class="header-anchor" href="#实现方法一-co-mysql" aria-hidden="true">#</a> 实现方法一（co-mysql）</h3><p>mysql库是以回调形式实现的，而koa中间件要求Promise形式，经过搜索，发现了co-mysql和mysql-co，这两个库的思路差不多，mysql-co封装度更高，并使用速度更快的mysql2，而co-mysql更简单，只是将mysql.query封装成Promise形式。下面是基于co-mysql的写法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> wrapper <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;co-mysql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">host</span> <span class="token operator">:</span> <span class="token string">&#39;localhost&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">port</span> <span class="token operator">:</span> <span class="token number">3306</span> <span class="token punctuation">,</span>
    <span class="token literal-property property">database</span> <span class="token operator">:</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">user</span><span class="token operator">:</span> <span class="token string">&#39;root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">password</span> <span class="token operator">:</span> <span class="token string">&#39;rootroot&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">,</span>
    p <span class="token operator">=</span> <span class="token function">wrapper</span><span class="token punctuation">(</span>pool<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//...</span>
<span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token keyword">yield</span> p<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">&#39;SELECT 1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">yield</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fieldName
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现方法二-promisify-node" tabindex="-1"><a class="header-anchor" href="#实现方法二-promisify-node" aria-hidden="true">#</a> 实现方法二（promisify-node）</h3><p>找到promisify-node库，可以将库整体转化为Promise形式，示例代码如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> promisify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;promisify-node&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token string">&quot;myDbHelper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token keyword">yield</span> db<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">yield</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fieldName
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现方法三-thunkify、thunkify-wrap" tabindex="-1"><a class="header-anchor" href="#实现方法三-thunkify、thunkify-wrap" aria-hidden="true">#</a> 实现方法三（thunkify、thunkify-wrap）</h3><p>看tj/co说明的Yieldables部分说明如下： The yieldable objects currently supported are:</p><ul><li>promises</li><li>thunks (functions)</li><li>array (parallel execution)</li><li>objects (parallel execution)</li><li>generators (delegation)</li><li>generator functions (delegation)</li></ul><p>因此使用thunkify也能够完成封装，thunkify-wrap是一个增强版的thunkify，不过看说明，这种方法在未来的发展中可能会被淘汰，大概的使用如下：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> genify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;thunkify-wrap&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>genify<span class="token punctuation">;</span>
<span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">genify</span><span class="token punctuation">(</span><span class="token string">&quot;myDbHelper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token keyword">yield</span> db<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">yield</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fieldName
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="实现方法四-直接方法" tabindex="-1"><a class="header-anchor" href="#实现方法四-直接方法" aria-hidden="true">#</a> 实现方法四（直接方法）</h3><p>直接改造原来express下的代码为Promise形式，参考了co-mysql，并仔细学习了Promise相关知识，完成了已有代码的改造，代码及说明如下： dbHelper.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> config <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./dbconfig&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token string-property property">&#39;host&#39;</span><span class="token operator">:</span> config<span class="token punctuation">.</span>db_host<span class="token punctuation">,</span>
    <span class="token string-property property">&#39;port&#39;</span><span class="token operator">:</span> config<span class="token punctuation">.</span>db_port<span class="token punctuation">,</span>
    <span class="token string-property property">&#39;database&#39;</span><span class="token operator">:</span> config<span class="token punctuation">.</span>db_name<span class="token punctuation">,</span>
    <span class="token string-property property">&#39;user&#39;</span><span class="token operator">:</span> config<span class="token punctuation">.</span>db_user<span class="token punctuation">,</span>
    <span class="token string-property property">&#39;password&#39;</span><span class="token operator">:</span> config<span class="token punctuation">.</span>db_passwd
<span class="token punctuation">}</span>

<span class="token keyword">var</span> mysql <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;mysql&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pool <span class="token operator">=</span> mysql<span class="token punctuation">.</span><span class="token function">createPool</span><span class="token punctuation">(</span>options<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//内部对mysql的封装，执行sql语句</span>
<span class="token keyword">function</span> <span class="token function">execQuery</span><span class="token punctuation">(</span><span class="token parameter">sql<span class="token punctuation">,</span> values<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> errinfo<span class="token punctuation">;</span>
    pool<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            errinfo <span class="token operator">=</span> <span class="token string">&#39;DB-获取数据库连接异常！&#39;</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> errinfo<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token keyword">var</span> querys <span class="token operator">=</span> connection<span class="token punctuation">.</span><span class="token function">query</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span> values<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token function">release</span><span class="token punctuation">(</span>connection<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    errinfo <span class="token operator">=</span> <span class="token string">&#39;DB-SQL语句执行错误:&#39;</span> <span class="token operator">+</span> err<span class="token punctuation">;</span>
                    <span class="token function">callback</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//注意：第一个参数必须为null</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">function</span> <span class="token function">release</span><span class="token punctuation">(</span><span class="token parameter">connection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        connection<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">error</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;DB-关闭数据库连接异常！&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//对外接口返回Promise函数形式</span>
exports<span class="token punctuation">.</span><span class="token function-variable function">getById</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">tablename<span class="token punctuation">,</span> id</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span>id<span class="token punctuation">}</span><span class="token punctuation">;</span>
        <span class="token keyword">var</span> sql <span class="token operator">=</span> <span class="token string">&#39;select * from ?? where ?&#39;</span><span class="token punctuation">;</span>
        <span class="token function">execQuery</span><span class="token punctuation">(</span>sql<span class="token punctuation">,</span><span class="token punctuation">[</span>tablename<span class="token punctuation">,</span> values<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
                <span class="token function">resolve</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>routes/index.js</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> db <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&quot;../dbHelper&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
<span class="token keyword">var</span> rows <span class="token operator">=</span> <span class="token keyword">yield</span> db<span class="token punctuation">.</span><span class="token function">getById</span><span class="token punctuation">(</span><span class="token string">&#39;tableName&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">yield</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">&#39;index&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">title</span><span class="token operator">:</span> rows<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fieldName
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//...</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="小结" tabindex="-1"><a class="header-anchor" href="#小结" aria-hidden="true">#</a> 小结</h3><p>koa框架以co库为核心组织，很好的用generator来解决了回调函数问题。进行Promise接口形式包装的时候，要注意：回调函数要完全符合其要求的形式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> rows</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="中间件" tabindex="-1"><a class="header-anchor" href="#中间件" aria-hidden="true">#</a> 中间件</h2><h3 id="koa-router" tabindex="-1"><a class="header-anchor" href="#koa-router" aria-hidden="true">#</a> koa-router</h3><p>路由是Web框架必不可少的基础功能, koa.js为了保持自身的精简, 并没有像Express.js自带了路由功能, 因此koa-router做了很好的补充, 作为koa星数最多的中间件, koa-router提供了全面的路由功能, 比如类似Express的app.get/post/put的写法, URL命名参数,、路由参数、支持加载多个中间件、嵌套路由等。其他可选的路由中间件：<code>koa-route</code>, <code>koa-joi-router</code>,<code>koa-trie-router</code></p><h3 id="koa-bodyparser" tabindex="-1"><a class="header-anchor" href="#koa-bodyparser" aria-hidden="true">#</a> koa-bodyparser</h3><p>koa.js并没有内置Request Body的解析器, 当我们需要解析请求体时需要加载额外的中间件, 官方提供的koa-bodyparser是个很不错的选择, 支持x-www-form-urlencoded, application/json等格式的请求体, 但不支持form-data的请求体, 需要借助<code>formidable</code>这个库, 也可以直接使用<code>koa-body</code>或<code>koa-better-body</code></p><h3 id="koa-views" tabindex="-1"><a class="header-anchor" href="#koa-views" aria-hidden="true">#</a> koa-views</h3><p>koa-views对需要进行视图模板其渲染的应用是个不可缺少的中间件, 支持ejs,nunjucks等众多模板引擎.</p><h3 id="koa-static" tabindex="-1"><a class="header-anchor" href="#koa-static" aria-hidden="true">#</a> koa-static</h3><p>Node.js除了处理动态请求, 也可以用作类似Nginx的静态文件服务, 在本地开发时特别方便, 可用于加载前端文件或后端Fake数据, 可结合<code>koa-compress</code>和<code>koa-mount</code>使用.</p><h3 id="koa-session" tabindex="-1"><a class="header-anchor" href="#koa-session" aria-hidden="true">#</a> koa-session</h3><p>HTTP是无状态协议, 为了保持用户状态, 我们一般使用Session会话, koa-session提供了这样的功能, 既支持将会话信息存储在本地Cookie, 也支持存储在Redis, MongoDB这样的外部存储设备.</p><h3 id="koa-jwt" tabindex="-1"><a class="header-anchor" href="#koa-jwt" aria-hidden="true">#</a> koa-jwt</h3><p>随着网站前后端分离方案的流行, 越来越多的网站从Session Base转为使用Token Base, JWT(Json Web Tokens)作为一个开放的标准被很多网站采用, koa-jwt这个中间件使用JWT认证HTTP请求.</p><h3 id="koa-helmet" tabindex="-1"><a class="header-anchor" href="#koa-helmet" aria-hidden="true">#</a> koa-helmet</h3><p>网络安全得到越来越多的重视, helmet通过增加如Strict-Transport-Security, X-Frame-Options, X-Frame-Options等HTTP头提高Express应用程序的安全性, koa-helmet为koa程序提供了类似的功能, 参考Node.js安全清单.</p><h3 id="koa-logger" tabindex="-1"><a class="header-anchor" href="#koa-logger" aria-hidden="true">#</a> koa-logger</h3><p>koa-logger提供了输出请求日志的功能, 包括请求的url、状态码、响应时间、响应体大小等信息， 对于调试和追踪应用程序特别有帮助，<code>koa-bunyan-logger</code>提供了更丰富的功能.</p><h3 id="koa-convert" tabindex="-1"><a class="header-anchor" href="#koa-convert" aria-hidden="true">#</a> koa-convert</h3><p>对于比较老的使用Generate函数的koa中间件(&lt;koa2), 官方提供了一个灵活的工具可以将他们转为基于Promise的中间件供Koa2使用, 同样也可以将新的基于Promise的中间件转为旧式的Generate中间件.</p><h2 id="koa准备工作" tabindex="-1"><a class="header-anchor" href="#koa准备工作" aria-hidden="true">#</a> Koa准备工作</h2><p>学习网站</p>`,46),h={href:"http://www.ruanyifeng.com/blog/2017/08/koa.html#comment-text",target:"_blank",rel:"noopener noreferrer"},y=s(`<p>检查Node版本, Koa必须使用7.6以上的版本. 如果版本低, 要先升级Node.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ node -v
v10.15.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>克隆配套的示例库</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ git clone https://github.com/ruanyf/koa-demos.git
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>进入示例库, 安装依赖.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>$ cd koa-demos
$ npm install
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>示例都在demos目录下面</p><h2 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法" aria-hidden="true">#</a> 基本用法</h2><h3 id="架设http服务" tabindex="-1"><a class="header-anchor" href="#架设http服务" aria-hidden="true">#</a> 架设HTTP服务</h3><p>只要三行代码, 就可以用Koa架设一个HTTP服务.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;Koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行脚本</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node 01.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问http://127.0.0.1:3000.页面显示&quot;Not Found&quot;, 表示没有发现任何内容. 这是因为我们并没有告诉Koa应该显示什么内容.</p><p><img src="`+l+`" alt="1553927499730"></p><h3 id="context对象" tabindex="-1"><a class="header-anchor" href="#context对象" aria-hidden="true">#</a> Context对象</h3><p>Koa提供一个Context对象, 表示一次对话的上下文(包括HTTP请求和HTTP回复). 通过加工这个对象, 就可以控制返回给用户的内容.</p><p><code>Context.response.body</code>属性就是发送给用户的内容.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;Koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>main</code>函数用来设置<code>ctx.response.body</code>.使用<code>app.use</code>方法加载<code>main</code>函数.</p><p><code>ctx.response</code>代表HTTP Response,<code>ctx.request</code>代表HTTP Request.</p><p>运行这个demo</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node 02.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>http://127.0.0.1:3000, 现在就可以看到&quot;Hello World&quot;</p><p><img src="`+u+`" alt="1553928770136"></p><h3 id="http-response的类型" tabindex="-1"><a class="header-anchor" href="#http-response的类型" aria-hidden="true">#</a> HTTP Response的类型</h3><p>Koa默认的返回数据类型是<code>text/plain</code>, 如果想返回其他类型的内容, 可以先用<code>ctx.request.accepts</code>判断一下, 客户端希望接受什么样的数据类型(根据HTTP Request的Accept字段), 然后使用<code>ctx.response.type</code>指定返回类型.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;Koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span> <span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">accepts</span><span class="token punctuation">(</span><span class="token string">&#39;xml&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;xml&#39;</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">&#39;&lt;data&gt;Hello World&lt;/data&gt;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">accepts</span><span class="token punctuation">(</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span><span class="token function">accepts</span><span class="token punctuation">(</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">&#39;&lt;p&gt;Hello World&lt;/p&gt;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;text&#39;</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行这个demo</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node 03.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问http://127.0.0.1:3000, 看到的就是XML文档了</p><p><img src="`+r+`" alt="1553931945847"></p><h3 id="网页模板" tabindex="-1"><a class="header-anchor" href="#网页模板" aria-hidden="true">#</a> 网页模板</h3><p>实际开发中, 返回给用户的网页往往都写成模板文件. 我们可以让Koa先读取模板文件, 然后将这个模板返回给用户.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;Koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;fs&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
	ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">;</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span> fs<span class="token punctuation">.</span><span class="token function">createReadStream</span><span class="token punctuation">(</span><span class="token string">&#39;./template.html&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行demo</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node 04.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问http://127.0.0.1:3000 看到的就是模板的内容了</p><p><img src="`+k+`" alt="1553933352598"></p><h2 id="路由" tabindex="-1"><a class="header-anchor" href="#路由" aria-hidden="true">#</a> 路由</h2><h3 id="原生路由" tabindex="-1"><a class="header-anchor" href="#原生路由" aria-hidden="true">#</a> 原生路由</h3><p>网站一般有多个页面, 通过<code>ctx.request.path</code>可以获取用户请求的路径, 由此实现简单的路由.</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;Koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>ctx<span class="token punctuation">.</span>request<span class="token punctuation">.</span>path<span class="token operator">!=</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">;</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">&#39;&lt;a href=&#39;</span><span class="token operator">/</span><span class="token string">&#39;&gt;Index Page&lt;/a&gt;&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
        ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行demo</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node 05.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问http://127.0.0.1:3000/111 可以看到一个链接,点击是跳转到首页的</p><p><img src="`+d+`" alt="1553934953012"></p><h3 id="koa-route模块" tabindex="-1"><a class="header-anchor" href="#koa-route模块" aria-hidden="true">#</a> koa-route模块</h3><p>原生路由用起来不太方便, 我们可以使用封装好的<code>koa-route</code>模块.</p><p>安装</p><p><code>npm i koa-route</code></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> Koa <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;Koa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> route <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;koa-route&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Koa</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">main</span> <span class="token operator">=</span> <span class="token parameter">ctx</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">&#39;Hello World&#39;</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">const</span> <span class="token function-variable function">about</span> <span class="token operator">=</span> <span class="token parameter">ctx</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
    ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>type<span class="token operator">=</span><span class="token string">&#39;html&#39;</span><span class="token punctuation">;</span>
	ctx<span class="token punctuation">.</span>response<span class="token punctuation">.</span>body<span class="token operator">=</span><span class="token string">&#39;&lt;a href=&quot;/&quot;&gt;IndexPage&lt;/a&gt;&#39;</span><span class="token punctuation">;</span>   
<span class="token punctuation">}</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>main<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>route<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;/about&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>about<span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码中, 根路径<code>/</code>的处理函数是<code>main</code>, <code>/about</code>路径的处理函数是<code>about</code>.</p><p>运行demo</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>node 06.js
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>访问http://127.0.0.1:3000/about</p><p><img src="`+v+'" alt="1553937013206"></p><h3 id="静态资源" tabindex="-1"><a class="header-anchor" href="#静态资源" aria-hidden="true">#</a> 静态资源</h3><p>如果网站提供静态资源(图片, 字体, 样式表, 脚本...), 为它们一个个写路由就很麻烦, 也没必要.<code>koa-static</code>模块封装了这部分的请求.</p>',59);function g(f,x){const a=t("ExternalLinkIcon");return e(),o("div",null,[b,n("p",null,[n("a",h,[c("http://www.ruanyifeng.com/blog/2017/08/koa.html#comment-text"),i(a)])]),y])}const q=p(m,[["render",g],["__file","index.html.vue"]]);export{q as default};
