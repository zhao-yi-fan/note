import{_ as n,p as s,q as a,Z as l}from"./framework-fdd38eac.js";const t={},e=l(`<h1 id="flutter相关对比" tabindex="-1"><a class="header-anchor" href="#flutter相关对比" aria-hidden="true">#</a> flutter相关对比</h1><h2 id="适合webapp的一些框架" tabindex="-1"><a class="header-anchor" href="#适合webapp的一些框架" aria-hidden="true">#</a> 适合WebApp的一些框架</h2><p><code>Cordova</code></p><p><code>Ionic</code></p><p><code>Dcloud</code></p><p><code>小程序</code></p><p><code>PWA</code></p><ul><li>优势：</li></ul><ol><li>可以将app的快捷方式放置到桌面上，全屏运行，与原生app无异</li><li>能够在各种网络环境下使用，包括网络差和断网条件下，不会显示undefined</li><li>推送消息的能力</li><li>其本质是一个网页，没有原生app的各种启动条件，快速响应用户指令</li></ol><ul><li>缺点</li></ul><ol><li>支持率不高：现在ios手机端不支持pwa，IE也暂时不支持</li><li>Chrome在中国桌面版占有率还是不错的，安卓移动端上的占有率却很低</li><li>各大厂商还未明确支持pwa</li><li>依赖的GCM服务在国内无法使用</li><li>微信小程序的竞争</li></ol><p><code>Instant App</code></p><ul><li>优势：</li></ul><ol><li>相对于小程序来说，谷歌官网要求每个Instant App程序最大不得超过4M的大小，但是小程序没有严格限制。</li><li>Instant App从用户体验角度来看，要比小程序好很多，体验起来让用户感觉，有种“我并没有安装这个程序，就能体验到和程序同样的丝滑体验”的感觉。</li></ol><ul><li>缺点：科学上网：具有Google Service框架的手机；完整应用必须提前安装到Google Play上</li></ul><h2 id="适合移动端app的一些框架" tabindex="-1"><a class="header-anchor" href="#适合移动端app的一些框架" aria-hidden="true">#</a> 适合移动端App的一些框架</h2><p><code>React Native</code></p><ul><li>特色：</li></ul><ol><li>Facebook出品的一个移动端开发框架，可以最大限度的接近原生的效果。</li><li>能够在javascript和React的基础上获得完全一致的开发体验，构建原生APP</li><li>仅需学习一次，编写任何平台。（Learn once, write anywhere）</li></ol><ul><li>缺点：</li></ul><ol><li>初次学习成本很高</li><li>必须在不同平台下写两套代码，依赖暴露的接口。</li></ol><p><code>Weex</code></p><ul><li>特点：</li></ul><ol><li>Weex能够完美兼顾性能与动态性，让移动开发者通过简洁的前端语法写出</li><li>Native级别的性能体验，并支持iOS、安卓、YunOS及Web等多端部署。</li></ol><ul><li>缺点：</li></ul><ol><li>控件太少，基本只能实现最基本的效果。</li><li>上手难度大，如果是前端和移动端都比较懂则上手很快。</li><li>随着项目变大，编译速度会指数型上升。</li></ol><p><code>flutter</code></p><ul><li>特点：</li></ul><ol><li>免费开源</li><li>利用保持状态的热重载（Hot Reload）、全新的响应式框架、丰富的控件以及集成的开发工具这些特点进行快速开发。</li><li>通过可组合的控件集合、丰富的动画库以及分层可扩展的架构来实现富有感染力的灵活界面设计。</li><li>借助可移植的GPU加速的渲染引擎以及高性能本地ARM代码运行时以达到跨设备跨平台的高质量用户体验。</li><li>提高效率：使用一套代码同时开发Android和iOS。</li><li>可扩展性很强：Flutter框架本身提供了丰富的Material Design和Cupertino（iOS-flavor）风格的控件，可自由扩展控件不受手机平台控件的限制。</li></ol><h1 id="flutter" tabindex="-1"><a class="header-anchor" href="#flutter" aria-hidden="true">#</a> flutter</h1><h2 id="数据类型" tabindex="-1"><a class="header-anchor" href="#数据类型" aria-hidden="true">#</a> 数据类型</h2><ul><li>num：int、double</li><li>String</li><li>List</li><li>Map</li><li>bool</li><li>dart中只有null，没有undefined</li></ul><div class="language-dart line-numbers-mode" data-ext="dart"><pre class="language-dart"><code><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// var定义变量不要求数据类型，泛型</span>
    <span class="token comment">// var会对数据类型自动识别</span>
    <span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token comment">// a = &quot;123&quot;;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 定义常量：var const final</span>
    <span class="token comment">// 相同点：一旦定义，不能再赋值。声明和赋值必须同时进行</span>
    <span class="token comment">// 不同点：final声明之后可以修改，const声明之后不能修改。</span>
    <span class="token comment">// const要求更加严格，const定义的是编译器的常量，不能是运行结果，final就二者都行</span>
    <span class="token comment">// final</span>
    <span class="token keyword">final</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;zf&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    b<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;zhufeng&quot;</span></span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// const</span>
    <span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">:</span> <span class="token string-literal"><span class="token string">&quot;zf&quot;</span></span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">;</span>
    c<span class="token punctuation">[</span><span class="token string-literal"><span class="token string">&quot;name&quot;</span></span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string-literal"><span class="token string">&quot;zhufeng&quot;</span></span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 对象/map/键值对 取值必须用中括号</span>

    <span class="token keyword">final</span> n1 <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print</span><span class="token punctuation">(</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// const n2 = sum(1,2);</span>
<span class="token punctuation">}</span>

<span class="token function">sum</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">&gt;</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="变量命令" tabindex="-1"><a class="header-anchor" href="#变量命令" aria-hidden="true">#</a> 变量命令</h2><p>数字、字符串、下划线、$来组成，不能以数字开头，区分大小写</p><p><strong>下划线开头的话代表私有（慎用）</strong></p>`,36),i=[e];function p(o,c){return s(),a("div",null,i)}const r=n(t,[["render",p],["__file","index.html.vue"]]);export{r as default};
