import{_ as n,p as s,q as a,Z as e}from"./framework-fdd38eac.js";const i={},l=e(`<h1 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h1><p>全称<code>node package manager</code></p><h2 id="npm-命令行工具" tabindex="-1"><a class="header-anchor" href="#npm-命令行工具" aria-hidden="true">#</a> npm 命令行工具</h2><p>npm 的第二层含义就是一个命令行工具, 只要你安装了 node 就已经安装了 npm</p><p>npm也有版本这个概念</p><p>可以通过在命令行中输入:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token parameter variable">--version</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>升级 npm(自己升级自己)</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--global</span> <span class="token function">npm</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="常用命令" tabindex="-1"><a class="header-anchor" href="#常用命令" aria-hidden="true">#</a> 常用命令</h2><ul><li><p><code>npm init [--yes]</code> 中括号表示可选项,写的话就去掉中括号只写里面的内容</p><ul><li>npm init -y 可以跳过向导,快速生成 -y 是 --yes的简写</li></ul></li><li><p><code>npm install</code></p><ul><li>一次性把 dependencies 选项中的依赖项全部安装</li></ul></li><li><p><code>npm install 包名</code></p><ul><li>只下载</li><li>npm i 包名</li></ul></li><li><p><code>npm install --save 包名</code> --save在包名的前面后面都可以</p><ul><li>下载并且保存依赖项(package.json 文件中的 dependencies 选项)</li><li><code>npm i -S 包名</code></li></ul></li><li><p><code>npm uninstall 包名</code></p><ul><li>只删除, 如果有依赖项会依然保存</li><li><code>npm un 包名</code></li></ul></li><li><p><code>npm uninstall --save 包名</code></p><ul><li>删除的同时也会把依赖信息也去除</li><li><code>npm un -S 包名</code></li></ul></li><li><p><code>npm help</code></p><ul><li>查看使用帮助</li></ul></li><li><p><code>npm 命令 --help</code></p><ul><li>查看指定命令的使用帮助</li><li>例如忘记了 uninstall 命令的简写了,可以输入<code>npm uninstall --help</code>来查看使用帮助</li></ul></li><li><p>在npm中安装固定的版本号package，只需要在其后加 ‘@版本号’</p></li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span>  <span class="token parameter variable">--save</span>  esri-loader@1.0.0
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="解决npm被墙问题" tabindex="-1"><a class="header-anchor" href="#解决npm被墙问题" aria-hidden="true">#</a> 解决npm被墙问题</h2><p>npm 存储包文件的服务器在国外, 有时候会被墙, 速度很慢</p><p>http://npm.taobao.org/ 淘宝的开发团队把 npm 在国内做了一个备份</p><p>安装淘宝的 cnpm:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 在任意目录执行都可以</span>
<span class="token comment"># --global 表示安装到全局,而非当前目录</span>
<span class="token comment"># --global 不能省略, 否则不管用</span>
<span class="token function">npm</span> <span class="token function">install</span> <span class="token parameter variable">--global</span> cnpm
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接下来你安装包的时候把之前的<code>npm</code>替换成<code>cnpm</code></p><p>例子:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment"># 这里还是走国外的 npm 服务器,速度比较慢</span>
<span class="token function">npm</span> <span class="token function">install</span> jquery

<span class="token comment"># .使用 cnpm 就会通过淘宝的服务器来下载 jquery</span>
cnpm <span class="token function">install</span> jquery
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果不想安装<code>cnpm</code>又想使用淘宝的的服务器来下载:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> jquery <span class="token parameter variable">--registry</span><span class="token operator">=</span>http://registry.npm.taobao.org
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>但是每一次手动这样加参数很麻烦,所以我们可以把这个选项加入配置文件中:</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">npm</span> config <span class="token builtin class-name">set</span> registry http://registry.npm.taobao.org

<span class="token comment"># 查看 npm 配置信息</span>
<span class="token function">npm</span> config list
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>只要经过了上面命令的配置,则你以后所有的<code>npm install</code>都会默认通过淘宝的服务器来下载.</p><h1 id="package-json" tabindex="-1"><a class="header-anchor" href="#package-json" aria-hidden="true">#</a> package.json</h1><p>我们建议每一个项目都有一个<code>package.json</code>文件(包描述文件, 就像产品说明一样).</p><ul><li><code>npm init</code>会出来package.json文件</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>c:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span><span class="token number">99344</span><span class="token punctuation">\\</span>Desktop<span class="token punctuation">\\</span>2018web<span class="token punctuation">\\</span>study<span class="token punctuation">\\</span><span class="token number">14</span>.node<span class="token punctuation">\\</span>day0<span class="token operator"><span class="token file-descriptor important">3</span>&gt;</span>npm init
This utility will walk you through creating a package.json file.
It only covers the <span class="token function">most</span> common items, and tries to guess sensible defaults.

See <span class="token variable"><span class="token variable">\`</span><span class="token function">npm</span> <span class="token builtin class-name">help</span> json<span class="token variable">\`</span></span> <span class="token keyword">for</span> definitive documentation on these fields
and exactly what they do.

Use <span class="token variable"><span class="token variable">\`</span><span class="token function">npm</span> <span class="token function">install</span> <span class="token operator">&lt;</span>pkg<span class="token operator">&gt;</span><span class="token variable">\`</span></span> afterwards to <span class="token function">install</span> a package and
save it as a dependency <span class="token keyword">in</span> the package.json file.

Press ^C at any <span class="token function">time</span> to quit.
package name: <span class="token punctuation">(</span>day03<span class="token punctuation">)</span>
version: <span class="token punctuation">(</span><span class="token number">1.0</span>.0<span class="token punctuation">)</span>
description:
entry point: <span class="token punctuation">(</span>index.js<span class="token punctuation">)</span>
<span class="token builtin class-name">test</span> command:
<span class="token function">git</span> repository:
keywords:
author:
license: <span class="token punctuation">(</span>ISC<span class="token punctuation">)</span>
About to <span class="token function">write</span> to c:<span class="token punctuation">\\</span>Users<span class="token punctuation">\\</span><span class="token number">99344</span><span class="token punctuation">\\</span>Desktop<span class="token punctuation">\\</span>2018web<span class="token punctuation">\\</span>study<span class="token punctuation">\\</span><span class="token number">14</span>.node<span class="token punctuation">\\</span>day03<span class="token punctuation">\\</span>package.json:

<span class="token punctuation">{</span>
  <span class="token string">&quot;name&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;day03&quot;</span>,
  <span class="token string">&quot;version&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;1.0.0&quot;</span>,
  <span class="token string">&quot;description&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
  <span class="token string">&quot;main&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;index.js&quot;</span>,
  <span class="token string">&quot;dependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,
  <span class="token string">&quot;devDependencies&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>,
  <span class="token string">&quot;scripts&quot;</span><span class="token builtin class-name">:</span> <span class="token punctuation">{</span>
    <span class="token string">&quot;test&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;echo <span class="token entity" title="\\&quot;">\\&quot;</span>Error: no test specified<span class="token entity" title="\\&quot;">\\&quot;</span> &amp;&amp; exit 1&quot;</span>
  <span class="token punctuation">}</span>,
  <span class="token string">&quot;author&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;&quot;</span>,
  <span class="token string">&quot;license&quot;</span><span class="token builtin class-name">:</span> <span class="token string">&quot;ISC&quot;</span>
<span class="token punctuation">}</span>


Is this OK? <span class="token punctuation">(</span>yes<span class="token punctuation">)</span> <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>npm i --save jquery</code> i 和 install都可以,还有加了--save会在package.json文件有记录</li><li>建议执行 <code>npm install 包名</code>的时候都加上<code>--save</code>这个选项, 目的是用来保存依赖项信息</li><li>如果<code>node_modules</code>删除了也不用担心,只需要:<code>npm install</code>就会自动把<code>package,.json</code>中的<code>dependencies</code>中所有的依赖项都下载回来</li></ul><p>对于目前来讲,最有用的是那个<code>dependencies</code>选项, 可以用来帮我们保存第三方包的依赖信息</p>`,31),p=[l];function t(c,o){return s(),a("div",null,p)}const u=n(i,[["render",t],["__file","npm.html.vue"]]);export{u as default};
